This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-11T11:36:31.926Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  index.html
  manifest.json
  robots.txt
src/
  api/
    api.js
  components/
    admin/
      AdminDashboard.jsx
      AdminTrips.jsx
      AdminUsers.jsx
    auth/
      register-steps/
        Step1.jsx
        Step2.jsx
        Step3.jsx
      Login.jsx
      Profile.jsx
      Register.jsx
    chat/
      GroupChat.jsx
      PrivateChat.jsx
    common/
      ErrorBoundary.jsx
      LoadingSpinner.jsx
      ProtectedRoute.jsx
    dashboard/
      Dashboard.jsx
      TripCard.jsx
      TripDetails.jsx
    layout/
      Footer.jsx
      Navbar.jsx
      Notifications.jsx
      Weather.jsx
    social/
      Friends.jsx
      Reviews.jsx
    trip/
      CalendarSync.jsx
      CreateTrip.jsx
      Expenses.jsx
      Itinerary.jsx
      JoinRequests
      PackingChecklist.jsx
      PersonalItinerary.jsx
      UserReliability.jsx
    voting/
      Voting.jsx
  hooks/
    useAuth.js
    useDarkMode.js
    useStompClient.js
    useTripAccess.js
  App.css
  App.jsx
  App.test.js
  index.css
  index.js
  logo.svg
  reportWebVitals.js
  setupTests.js
.gitignore
package.json
README.md
tailwind.config.js

================================================================
Files
================================================================

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>TravelBuddy</title>
  </head>
  <body class="bg-gray-50 dark:bg-gray-900">
    <div id="root"></div>
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: src/api/api.js
================
import axios from 'axios';
import toast from 'react-hot-toast';

const API = axios.create({
  baseURL: 'http://localhost:8080/api',
});

API.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});

API.interceptors.response.use(
  (response) => response,
  (error) => {
    const errorMessage = error.response?.data || error.message;
    console.error('API error:', errorMessage);
    toast.error(errorMessage);
    return Promise.reject(error);
  }
);

export default API;

================
File: src/components/admin/AdminDashboard.jsx
================
import React from 'react';
import { Link } from 'react-router-dom';

const AdminDashboard = () => {
  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <h1 className="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-gray-200">Admin Dashboard</h1>
      <div className="max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-6">
        <Link to="/admin/users" className="block bg-white dark:bg-gray-700 rounded-lg shadow p-6 hover:shadow-xl transition">
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200">Manage Users</h2>
          <p className="text-gray-600 dark:text-gray-300">View, edit, and delete users.</p>
        </Link>
        <Link to="/admin/trips" className="block bg-white dark:bg-gray-700 rounded-lg shadow p-6 hover:shadow-xl transition">
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200">Manage Trips</h2>
          <p className="text-gray-600 dark:text-gray-300">Review and manage all trips.</p>
        </Link>
      </div>
    </div>
  );
};

export default AdminDashboard;

================
File: src/components/admin/AdminTrips.jsx
================
import React, { useEffect, useState } from 'react';
import API from '../../api/api';

const AdminTrips = () => {
  const [trips, setTrips] = useState([]);

  useEffect(() => {
    API.get('/trips')
      .then((res) => setTrips(res.data))
      .catch((err) => console.error(err));
  }, []);

  const deleteTrip = async (tripId) => {
    try {
      await API.delete(`/trips/${tripId}`);
      setTrips(trips.filter(trip => trip.id !== tripId));
    } catch (err) {
      console.error('Error deleting trip:', err);
    }
  };

  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <h1 className="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-gray-200">Manage Trips</h1>
      <table className="min-w-full bg-white dark:bg-gray-700">
        <thead>
          <tr>
            <th className="py-2 px-4 border">ID</th>
            <th className="py-2 px-4 border">Title</th>
            <th className="py-2 px-4 border">Destination</th>
            <th className="py-2 px-4 border">Status</th>
            <th className="py-2 px-4 border">Organizer</th>
            <th className="py-2 px-4 border">Actions</th>
          </tr>
        </thead>
        <tbody>
          {trips.map((trip) => (
            <tr key={trip.id} className="text-center">
              <td className="py-2 px-4 border">{trip.id}</td>
              <td className="py-2 px-4 border">{trip.title}</td>
              <td className="py-2 px-4 border">{trip.destination}</td>
              <td className="py-2 px-4 border">{trip.status}</td>
              <td className="py-2 px-4 border">{trip.organizer.username}</td>
              <td className="py-2 px-4 border">
                <button onClick={() => deleteTrip(trip.id)} className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 transition">
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AdminTrips;

================
File: src/components/admin/AdminUsers.jsx
================
import React, { useEffect, useState } from 'react';
import API from '../../api/api';

const AdminUsers = () => {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    API.get('/users')
      .then((res) => setUsers(res.data))
      .catch((err) => console.error(err));
  }, []);

  const deleteUser = async (userId) => {
    try {
      await API.delete(`/users/${userId}`);
      setUsers(users.filter(user => user.id !== userId));
    } catch (err) {
      console.error('Error deleting user:', err);
    }
  };

  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <h1 className="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-gray-200">Manage Users</h1>
      <table className="min-w-full bg-white dark:bg-gray-700">
        <thead>
          <tr>
            <th className="py-2 px-4 border">ID</th>
            <th className="py-2 px-4 border">Username</th>
            <th className="py-2 px-4 border">Email</th>
            <th className="py-2 px-4 border">Role</th>
            <th className="py-2 px-4 border">Actions</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id} className="text-center">
              <td className="py-2 px-4 border">{user.id}</td>
              <td className="py-2 px-4 border">{user.username}</td>
              <td className="py-2 px-4 border">{user.email}</td>
              <td className="py-2 px-4 border">{user.role}</td>
              <td className="py-2 px-4 border">
                <button onClick={() => deleteUser(user.id)} className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 transition">
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AdminUsers;

================
File: src/components/auth/register-steps/Step1.jsx
================
import React, { useState, useEffect } from 'react';

const Step1 = ({ formData, onChange, onValidityChange }) => {
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});

  const validate = () => {
    let newErrors = {};

    // Username validations
    if (!formData.username.trim()) {
      newErrors.username = 'Username is required';
    } else if (formData.username.trim().length < 3) {
      newErrors.username = 'Username must be at least 3 characters';
    } else if (/\s/.test(formData.username)) {
      newErrors.username = 'Username should not contain spaces';
    }

    // Password validations
    if (!formData.password.trim()) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 8) {
      newErrors.password = 'Password must be at least 8 characters';
    } else if (!/(?=.*\d)/.test(formData.password)) {
      newErrors.password = 'Password must contain at least one digit';
    } else if (!/(?=.*[!@#$%^&*])/.test(formData.password)) {
      newErrors.password = 'Password must contain at least one special character';
    }

    setErrors(newErrors);
    onValidityChange(Object.keys(newErrors).length === 0);
  };

  useEffect(() => {
    validate();
  }, [formData, onValidityChange]);

  const handleBlur = (e) => {
    setTouched({ ...touched, [e.target.name]: true });
  };

  return (
    <>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">Username</label>
        <input
          type="text"
          name="username"
          value={formData.username}
          onChange={onChange}
          onBlur={handleBlur}
          className="mt-1 w-full px-4 py-2 border rounded"
        />
        {touched.username && errors.username && (
          <p className="text-red-600 text-sm mt-1">{errors.username}</p>
        )}
      </div>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">
          Password (min 8 characters, include a digit and special character)
        </label>
        <input
          type="password"
          name="password"
          value={formData.password}
          onChange={onChange}
          onBlur={handleBlur}
          className="mt-1 w-full px-4 py-2 border rounded"
        />
        {touched.password && errors.password && (
          <p className="text-red-600 text-sm mt-1">{errors.password}</p>
        )}
      </div>
    </>
  );
};

export default Step1;

================
File: src/components/auth/register-steps/Step2.jsx
================
import React, { useState, useEffect } from 'react';

const Step2 = ({ formData, onChange, onValidityChange }) => {
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});

  const validate = () => {
    let newErrors = {};
    if (!formData.gender) newErrors.gender = 'Gender is required';
    if (!formData.email.trim()) newErrors.email = 'Email is required';
    else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(formData.email))
      newErrors.email = 'Invalid email address';
    setErrors(newErrors);
    onValidityChange(Object.keys(newErrors).length === 0);
  };

  useEffect(() => {
    validate();
  }, [formData, onValidityChange]);

  const handleBlur = (e) => {
    setTouched({ ...touched, [e.target.name]: true });
  };

  return (
    <>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">Gender</label>
        <select
          name="gender"
          value={formData.gender}
          onChange={onChange}
          onBlur={handleBlur}
          className="mt-1 w-full px-4 py-2 border rounded"
        >
          <option value="">Select gender</option>
          <option value="male">Male</option>
          <option value="female">Female</option>
        </select>
        {touched.gender && errors.gender && (
          <p className="text-red-600 text-sm mt-1">{errors.gender}</p>
        )}
      </div>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">Email</label>
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={onChange}
          onBlur={handleBlur}
          className="mt-1 w-full px-4 py-2 border rounded"
        />
        {touched.email && errors.email && (
          <p className="text-red-600 text-sm mt-1">{errors.email}</p>
        )}
      </div>
    </>
  );
};

export default Step2;

================
File: src/components/auth/register-steps/Step3.jsx
================
import React, { useState, useEffect } from 'react';

const Step3 = ({ formData, onChange, onValidityChange }) => {
  // Optional fields; we assume they are always valid
  useEffect(() => {
    onValidityChange(true);
  }, [formData, onValidityChange]);

  return (
    <>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">Profile Picture URL</label>
        <input
          type="url"
          name="profilePicture"
          value={formData.profilePicture}
          onChange={onChange}
          className="mt-1 w-full px-4 py-2 border rounded"
        />
      </div>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">Bio (max 512 characters)</label>
        <textarea
          name="bio"
          value={formData.bio}
          onChange={onChange}
          className="mt-1 w-full px-4 py-2 border rounded"
          maxLength="512"
        ></textarea>
      </div>
    </>
  );
};

export default Step3;

================
File: src/components/auth/Login.jsx
================
import React, { useState } from 'react';
import { useAuth } from '../../hooks/useAuth';
import API from '../../api/api';

const Login = () => {
  const [creds, setCreds] = useState({ username: '', password: '' });
  const [errors, setErrors] = useState({});
  const { login } = useAuth();

  const onChange = (e) => {
    setCreds({ ...creds, [e.target.name]: e.target.value });
    setErrors({ ...errors, [e.target.name]: '' });
  };

  const validateField = (name, value) => {
    let message = '';
    if (name === 'username') {
      if (!value.trim()) {
        message = 'Username is required';
      } else if (value.trim().length < 3) {
        message = 'Username must be at least 3 characters';
      }
    }
    if (name === 'password') {
      if (!value.trim()) {
        message = 'Password is required';
      } else if (value.length < 8) {
        message = 'Password must be at least 8 characters';
      }
    }
    setErrors((prev) => ({ ...prev, [name]: message }));
  };

  const onBlur = (e) => {
    validateField(e.target.name, e.target.value);
  };

  const validate = () => {
    let newErrors = {};
    if (!creds.username.trim()) {
      newErrors.username = 'Username is required';
    } else if (creds.username.trim().length < 3) {
      newErrors.username = 'Username must be at least 3 characters';
    }
    if (!creds.password.trim()) {
      newErrors.password = 'Password is required';
    } else if (creds.password.length < 8) {
      newErrors.password = 'Password must be at least 8 characters';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validate()) return;
    try {
      login(creds);
      API.navigate('/');
    } catch (err) {
      setErrors({ form: 'Invalid credentials. Please try again.' });
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl p-8 max-w-md w-full transform transition duration-500 hover:scale-105">
        <h2 className="text-3xl font-bold text-center text-blue-600 dark:text-blue-400 mb-6">Login</h2>
        {errors.form && <p className="mb-4 text-center text-red-600">{errors.form}</p>}
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-700 dark:text-gray-300">Username</label>
            <input
              type="text"
              name="username"
              value={creds.username}
              onChange={onChange}
              onBlur={onBlur}
              className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
            />
            {errors.username && (
              <p className="text-red-600 text-sm mt-1">{errors.username}</p>
            )}
          </div>
          <div className="mb-6">
            <label className="block text-gray-700 dark:text-gray-300">Password</label>
            <input
              type="password"
              name="password"
              value={creds.password}
              onChange={onChange}
              onBlur={onBlur}
              className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
            />
            {errors.password && (
              <p className="text-red-600 text-sm mt-1">{errors.password}</p>
            )}
          </div>
          <button type="submit" className="w-full bg-blue-600 dark:bg-blue-500 text-white py-2 rounded hover:bg-blue-700 transition">
            Login
          </button>
        </form>
      </div>
    </div>
  );
};

export default Login;

================
File: src/components/auth/Profile.jsx
================
import React, { useEffect, useState } from 'react';
import API from '../../api/api';
import { Transition } from '@headlessui/react';

const Profile = () => {
  const [profile, setProfile] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [tempProfile, setTempProfile] = useState({});

  useEffect(() => {
    API.get('/auth/me')
      .then(res => {
        setProfile(res.data);
        setTempProfile(res.data);
      })
      .catch(err => console.error(err));
  }, []);

  const onChange = (e) => setTempProfile({ ...tempProfile, [e.target.name]: e.target.value });
  const handleSave = async () => {
    try {
      await API.put('/users/updateProfile', tempProfile);
      setProfile(tempProfile);
      setEditMode(false);
    } catch (err) {
      console.error('Error updating profile:', err);
    }
  };

  if (!profile) return <div className="pt-20 text-center">Loading...</div>;

  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <div className="max-w-3xl mx-auto bg-white dark:bg-gray-700 rounded-lg shadow p-6">
        <div className="flex items-center justify-between">
          <h2 className="text-3xl font-bold text-gray-800 dark:text-gray-200">My Profile</h2>
          <button onClick={() => setEditMode(prev => !prev)} className="px-4 py-2 bg-blue-600 dark:bg-blue-500 text-white rounded hover:bg-blue-700 transition">
            {editMode ? 'Cancel' : 'Edit'}
          </button>
        </div>
        <div className="mt-6 flex items-center space-x-6">
          <img src={profile.profilePicture || '/default-avatar.png'} alt="Profile" className="w-24 h-24 rounded-full object-cover shadow-md" />
          <div className="flex-1">
            {editMode ? (
              <>
                <div className="mb-4">
                  <label className="block text-gray-700 dark:text-gray-300">Username</label>
                  <input type="text" name="username" value={tempProfile.username} onChange={onChange}
                    className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition" />
                </div>
                <div className="mb-4">
                  <label className="block text-gray-700 dark:text-gray-300">Email</label>
                  <input type="email" name="email" value={tempProfile.email} onChange={onChange}
                    className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition" />
                </div>
                {/* <div className="mb-4">
                  <label className="block text-gray-700 dark:text-gray-300">Bio</label>
                  <textarea name="bio" value={tempProfile.bio} onChange={onChange}
                    className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition" maxLength="512"></textarea>
                </div> */}
                <button onClick={handleSave} className="px-4 py-2 bg-green-600 dark:bg-green-500 text-white rounded hover:bg-green-700 transition">
                  Save Changes
                </button>
              </>
            ) : (
              <>
                <h3 className="text-2xl font-semibold text-gray-800 dark:text-gray-200">{profile.username}</h3>
                <p className="text-gray-600 dark:text-gray-300">{profile.email}</p>
                <p className="mt-2 text-gray-700 dark:text-gray-300">{profile.bio}</p>
              </>
            )}
          </div>
        </div>
        <Transition
          show={editMode}
          enter="transition-opacity duration-300" enterFrom="opacity-0" enterTo="opacity-100"
          leave="transition-opacity duration-200" leaveFrom="opacity-100" leaveTo="opacity-0"
        >
          {editMode && (
            <div className="mt-6 p-4 bg-blue-50 dark:bg-gray-600 rounded">
              <p className="text-blue-600 dark:text-blue-200">Editing mode is active. Remember to save your changes.</p>
            </div>
          )}
        </Transition>
      </div>
    </div>
  );
};

export default Profile;

================
File: src/components/auth/Register.jsx
================
import React, { useState } from 'react';
import API from '../../api/api';
import Step1 from './register-steps/Step1';
import Step2 from './register-steps/Step2';
import Step3 from './register-steps/Step3';

const steps = [
  { id: 0, title: 'Account Info', component: Step1 },
  { id: 1, title: 'Personal Details', component: Step2 },
  { id: 2, title: 'Profile & Settings', component: Step3 }
];

const Register = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [isStepValid, setIsStepValid] = useState(false);
  const [formData, setFormData] = useState({
    username: '',
    loginName: '',
    password: '',
    gender: '',
    email: '',
    profilePicture: '',
    bio: ''
  });
  const [errors, setErrors] = useState({});

  const onChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleValidityChange = (isValid) => {
    setIsStepValid(isValid);
  };

  const handleNext = () => {
    if (!isStepValid) return;
    setCurrentStep((prev) => prev + 1);
  };

  const handleBack = () => {
    setCurrentStep((prev) => prev - 1);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isStepValid) return;
    try {
      await API.post('/auth/register', formData);
      API.navigate('/login');
    } catch (err) {
      setErrors({ form: 'Registration failed. Please try again.' });
    }
  };

  const StepComponent = steps[currentStep].component;

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl p-8 max-w-lg w-full">
        <h2 className="text-3xl font-bold text-center text-blue-600 dark:text-blue-400 mb-6">Register</h2>
        {errors.form && <p className="mb-4 text-center text-red-600">{errors.form}</p>}
        <div className="mb-6 flex justify-between">
          {steps.map((step, idx) => (
            <div key={step.id} className={`flex-1 text-center ${idx === currentStep ? 'text-blue-600 dark:text-blue-400 font-bold' : 'text-gray-500'}`}>
              {step.title}
            </div>
          ))}
        </div>
        <form onSubmit={handleSubmit}>
          <StepComponent 
            formData={formData} 
            onChange={onChange} 
            onValidityChange={handleValidityChange} 
          />
          <div className="flex justify-between mt-6">
            {currentStep > 0 && (
              <button type="button" onClick={handleBack} className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400 transition">
                Back
              </button>
            )}
            {currentStep < steps.length - 1 && (
              <button 
                type="button" 
                onClick={handleNext} 
                disabled={!isStepValid} 
                className={`ml-auto px-4 py-2 rounded transition ${isStepValid ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-400 text-gray-200'}`}
              >
                Next
              </button>
            )}
            {currentStep === steps.length - 1 && (
              <button 
                type="submit" 
                disabled={!isStepValid} 
                className={`ml-auto px-4 py-2 rounded transition ${isStepValid ? 'bg-green-600 text-white hover:bg-green-700' : 'bg-gray-400 text-gray-200'}`}
              >
                Register
              </button>
            )}
          </div>
        </form>
      </div>
    </div>
  );
};

export default Register;

================
File: src/components/chat/GroupChat.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { Transition } from '@headlessui/react';
import { useStompClient } from '../../hooks/useStompClient';

const GroupChat = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  // Use our updated hook which returns both client and connected flag
  const { client, connected } = useStompClient('ws://localhost:8080/ws'); 
  const messagesEndRef = useRef(null);

  // Subscribe only when the client is connected
  useEffect(() => {
    if (!client || !connected) return;
    const subscription = client.subscribe('/app/topic/group', (message) => {
      setMessages((prev) => [...prev, JSON.parse(message.body)]);
    });
    return () => subscription.unsubscribe();
  }, [client, connected]);

  // Auto-scroll to the latest message
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const sendMessage = () => {
    if (input.trim() && client && connected) {
      client.publish({
        destination: '/app/group.sendMessage',
        body: JSON.stringify({ content: input, sender: 'You' })
      });
      setInput('');
    }
  };

  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen flex flex-col">
      <h2 className="text-3xl font-bold text-center mb-6 text-gray-800 dark:text-gray-200">Group Chat</h2>
      <div className="flex-1 bg-white dark:bg-gray-700 rounded-lg shadow overflow-y-auto p-4 mb-4">
        {messages.map((msg, idx) => (
          <Transition
            key={idx}
            appear={true}
            show={true}
            enter="transition-opacity duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
          >
            <div className="mb-3">
              <span className="font-semibold text-blue-600">{msg.sender}:</span> {msg.content}
            </div>
          </Transition>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <div className="flex">
        <input
          type="text"
          placeholder="Type a message..."
          className="flex-1 px-4 py-2 border rounded-l focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
        />
        <button onClick={sendMessage} className="bg-blue-600 text-white px-4 py-2 rounded-r hover:bg-blue-700 transition">
          Send
        </button>
      </div>
    </div>
  );
};

export default GroupChat;

================
File: src/components/chat/PrivateChat.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { Transition } from '@headlessui/react';
import { useStompClient } from '../../hooks/useStompClient';

const PrivateChat = ({ recipientId }) => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const client = useStompClient('ws://localhost:8080/ws');
  const messagesEndRef = useRef(null);

  useEffect(() => {
    if (!client) return;
    client.subscribe(`/user/${recipientId}/queue/private`, (message) => {
      setMessages((prev) => [...prev, JSON.parse(message.body)]);
    });
  }, [client, recipientId]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const sendMessage = () => {
    if (input.trim() && client) {
      client.publish({
        destination: '/app/private.sendMessage',
        body: JSON.stringify({ content: input, recipientId, sender: 'You' })
      });
      setInput('');
    }
  };

  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen flex flex-col">
      <h2 className="text-3xl font-bold text-center mb-6 text-gray-800 dark:text-gray-200">Private Chat</h2>
      <div className="flex-1 bg-white dark:bg-gray-700 rounded-lg shadow overflow-y-auto p-4 mb-4">
        {messages.map((msg, idx) => (
          <Transition key={idx} appear={true} show={true} enter="transition-opacity duration-300" enterFrom="opacity-0" enterTo="opacity-100">
            <div className="mb-3">
              <span className="font-semibold text-blue-600">{msg.sender}:</span> {msg.content}
            </div>
          </Transition>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <div className="flex">
        <input type="text" placeholder="Type a message..."
          className="flex-1 px-4 py-2 border rounded-l focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
          value={input} onChange={(e) => setInput(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && sendMessage()} />
        <button onClick={sendMessage} className="bg-blue-600 text-white px-4 py-2 rounded-r hover:bg-blue-700 transition">
          Send
        </button>
      </div>
    </div>
  );
};

export default PrivateChat;

================
File: src/components/common/ErrorBoundary.jsx
================
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  
  static getDerivedStateFromError(error) {
    return { hasError: true };
  }
  
  componentDidCatch(error, errorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }
  
  render() {
    if (this.state.hasError) {
      return (
        <div className="flex items-center justify-center h-screen">
          <h1 className="text-4xl font-bold">Something went wrong.</h1>
        </div>
      );
    }
    return this.props.children;
  }
}

export default ErrorBoundary;

================
File: src/components/common/LoadingSpinner.jsx
================
import React from 'react';

const LoadingSpinner = () => (
  <div className="flex items-center justify-center h-full">
    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600"></div>
  </div>
);

export default LoadingSpinner;

================
File: src/components/common/ProtectedRoute.jsx
================
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';

const ProtectedRoute = ({ children }) => {
  const { user, loading, isAuthenticated } = useAuth();

  // Show loading state while checking authentication
  if (loading) {
    return <div>Loading...</div>; // You can replace this with a proper loading component
  }

  // Check both user and isAuthenticated
  if (!isAuthenticated()) {
    return <Navigate to="/login" replace />;
  }

  return children;
};

export default ProtectedRoute;

================
File: src/components/dashboard/Dashboard.jsx
================
// src/components/dashboard/Dashboard.jsx
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import API from '../../api/api';
import TripCard from './TripCard';

const Dashboard = () => {
  const [trips, setTrips] = useState([]);
  const [filter, setFilter] = useState('');

  useEffect(() => {
    (async () => {
      try {
        const { data } = await API.get('/trips');
        setTrips(data);
      } catch (err) {
        console.error('Error fetching trips:', err);
      }
    })();
  }, []);

  const filteredTrips = trips.filter(trip =>
    trip.title.toLowerCase().includes(filter.toLowerCase())
  );

  return (
    <div className="pt-20 pb-8 px-4 md:px-8 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-4xl font-bold text-gray-800 dark:text-gray-200">Your Trips</h1>
        {/* Create Trip Button */}
        <Link
          to="/trips/create"
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
        >
          Create New Trip
        </Link>
      </div>
      <div className="max-w-3xl mx-auto mb-6">
        <input
          type="text"
          placeholder="Filter trips by title..."
          className="w-full px-4 py-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
        />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredTrips.map(trip => (
          <TripCard key={trip.id} trip={trip} />
        ))}
      </div>
    </div>
  );
};

export default Dashboard;

================
File: src/components/dashboard/TripCard.jsx
================
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { Transition } from '@headlessui/react';
import { useAuth } from '../../hooks/useAuth';

const TripCard = ({ trip }) => {
  const [modalOpen, setModalOpen] = useState(false);
  const { user } = useAuth();
  const isMember = trip.members && user && trip.members.some(member => member.id === user.id);
  

  return (
    <>
      <div
        className="relative bg-white dark:bg-gray-700 rounded-lg shadow-md overflow-hidden transform hover:scale-105 transition duration-300 cursor-pointer"
        onClick={() => setModalOpen(true)}
      >
        <img src={trip.image || '/default-trip.jpg'} alt={trip.title} className="w-full h-40 object-cover" />
        <div className="p-4">
          <h2 className="text-xl font-bold text-gray-800 dark:text-gray-200">{trip.title}</h2>
          <p className="text-gray-600 dark:text-gray-300">{trip.destination}</p>
          <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
            {new Date(trip.startDate).toLocaleDateString()} - {new Date(trip.endDate).toLocaleDateString()}
          </p>
        </div>
      </div>
      <Transition
        show={modalOpen}
        enter="transition ease-out duration-300" enterFrom="opacity-0" enterTo="opacity-100"
        leave="transition ease-in duration-200" leaveFrom="opacity-100" leaveTo="opacity-0"
      >
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white dark:bg-gray-700 rounded-lg p-6 max-w-lg mx-auto relative">
            <button onClick={() => setModalOpen(false)} className="absolute top-2 right-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 focus:outline-none">
              <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            <img src={trip.image || '/default-trip.jpg'} alt={trip.title} className="w-full h-48 object-cover rounded" />
            <h2 className="text-2xl font-bold mt-4 text-gray-800 dark:text-gray-200">{trip.title}</h2>
            <p className="text-gray-600 dark:text-gray-300">{trip.destination}</p>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
              {new Date(trip.startDate).toLocaleDateString()} - {new Date(trip.endDate).toLocaleDateString()}
            </p>
            <p className="mt-4 text-gray-700 dark:text-gray-300">{trip.description}</p>
            <div className="mt-4 text-right">
              {isMember ? (
                <Link
                  to={`/trip/${trip.id}`}
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
                >
                  View Details
                </Link>
              ) : (
                <p className="text-sm text-gray-500">Join the trip to see full details</p>
              )}
            </div>
          </div>
        </div>
      </Transition>
    </>
  );
};

export default TripCard;

================
File: src/components/dashboard/TripDetails.jsx
================
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import API from '../../api/api';
import { Tab } from '@headlessui/react';
import { useTripAccess } from '../../hooks/useTripAccess';
import Itinerary from '../trip/Itinerary';
import PackingChecklist from '../trip/PackingChecklist';
import Expenses from '../trip/Expenses';
import GroupChat from '../chat/GroupChat';
import Voting from '../voting/Voting';
import Weather from '../layout/Weather';
import PersonalItinerary from '../trip/PersonalItinerary';
import JoinRequests from '../trip/JoinRequests';

function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}

// Protected tabs – each receives tripId and other props
const protectedTabs = [
  { label: 'Group Itinerary', content: <Itinerary tripId={null} /> },
  { label: 'Personal Itinerary', content: <PersonalItinerary /> },
  { label: 'Packing Checklist', content: <PackingChecklist tripId={null} /> },
  { label: 'Expenses', content: <Expenses tripId={null} /> },
  { label: 'Group Chat', content: <GroupChat tripId={null} /> },
  { label: 'Voting', content: <Voting options={[
    { value: 'itinerary', label: 'Itinerary Vote', votes: 0 },
    { value: 'checklist', label: 'Checklist Vote', votes: 0 }
  ]} onVote={(v) => { console.log('Voted:', v); }} currentVote={null} /> },
];

const publicContent = <p className="text-gray-700 dark:text-gray-300">Public trip details. Join the trip to view full details.</p>;

const TripDetails = () => {
  const { id } = useParams();
  const [trip, setTrip] = useState(null);
  const isMember = useTripAccess(trip);
  const [isOrganizer, setIsOrganizer] = useState(false);

  useEffect(() => {
    (async () => {
      try {
        const { data } = await API.get(`/trips/${id}`);
        setTrip(data);
        // Check if the current user is the organizer
        const currentUser = JSON.parse(localStorage.getItem('token')) && data.organizer; // Simplified check; use useAuth hook for full implementation
        setIsOrganizer(data.organizer.id === (data.currentUserId || 0));
      } catch (err) {
        console.error('Error fetching trip details:', err);
      }
    })();
  }, [id]);

  if (!trip) return <div className="pt-20 text-center"><p>Loading...</p></div>;

  // Extend tabs with required props
  const extendedTabs = protectedTabs.map((tab) => ({
    label: tab.label,
    content: React.cloneElement(tab.content, { tripId: trip.id })
  }));

  if (isOrganizer) {
    extendedTabs.push({
      label: 'Join Requests',
      content: <JoinRequests tripId={trip.id} initialRequests={trip.joinRequests} />
    });
  }

  return (
    <div className="pt-20 pb-8 px-4 md:px-8 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <div className="max-w-4xl mx-auto bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        <img src={trip.image || '/default-trip.jpg'} alt={trip.title} className="w-full h-64 object-cover" />
        <div className="p-6">
          <h1 className="text-4xl font-bold mb-2 text-gray-800 dark:text-gray-200">{trip.title}</h1>
          <p className="text-gray-600 dark:text-gray-300 mb-4">{trip.destination}</p>
          <Weather destination={trip.destination} />
          {isMember ? (
            <Tab.Group>
              <Tab.List className="flex space-x-1 border-b">
                {extendedTabs.map((tab) => (
                  <Tab key={tab.label} className={({ selected }) =>
                    classNames(
                      'w-full py-2.5 text-sm font-medium text-blue-600 dark:text-blue-400',
                      selected ? 'border-b-2 border-blue-600' : 'text-gray-500 dark:text-gray-300 hover:text-blue-600'
                    )
                  }>
                    {tab.label}
                  </Tab>
                ))}
              </Tab.List>
              <Tab.Panels className="mt-4">
                {extendedTabs.map((tab) => (
                  <Tab.Panel key={tab.label}>
                    {tab.content}
                  </Tab.Panel>
                ))}
              </Tab.Panels>
            </Tab.Group>
          ) : (
            publicContent
          )}
        </div>
      </div>
    </div>
  );
};

export default TripDetails;

================
File: src/components/layout/Footer.jsx
================
import React from 'react';

const Footer = () => (
  <footer className="bg-gray-800 dark:bg-gray-900 text-gray-200 text-center py-4">
    <p>© 2025 TravelBuddy. All rights reserved.</p>
  </footer>
);

export default Footer;

================
File: src/components/layout/Navbar.jsx
================
import React, { useState } from 'react';
import { Link, NavLink } from 'react-router-dom';
import { useDarkMode } from '../../hooks/useDarkMode';
import { useAuth } from '../../hooks/useAuth';

const NAV_LINKS = [
  { to: '/', label: 'Dashboard' },
  { to: '/friends', label: 'Friends' },
  { to: '/calendar', label: 'Calendar' },
];

// NavLinks renders appropriate links based on authentication status.
const NavLinks = ({ user, onClick }) => {
  if (user) {
    return (
      <>
        {NAV_LINKS.map(({ to, label }) => (
          <NavLink
            key={to}
            to={to}
            onClick={onClick}
            className={({ isActive }) =>
              isActive
                ? 'block text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 pb-1'
                : 'block text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 pb-1'
            }
          >
            {label}
          </NavLink>
        ))}
      </>
    );
  }
  return (
    <>
      <Link
        to="/login"
        onClick={onClick}
        className="block text-gray-700 dark:text-gray-300 hover:text-blue-600"
      >
        Login
      </Link>
      <Link
        to="/register"
        onClick={onClick}
        className="block text-gray-700 dark:text-gray-300 hover:text-blue-600"
      >
        Register
      </Link>
    </>
  );
};

const UserDropdown = () => {
  const [open, setOpen] = useState(false);
  return (
    <div className="relative ml-4">
      <button
        onClick={() => setOpen((prev) => !prev)}
        className="flex items-center focus:outline-none focus:ring-2 focus:ring-blue-600"
      >
        <img className="h-8 w-8 rounded-full" src="/default-avatar.png" alt="User" />
        <span className="ml-2 text-gray-700 dark:text-gray-300">My Account</span>
        <svg className="ml-1 h-4 w-4 text-gray-600 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>
      {open && (
        <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-gray-700 ring-1 ring-black ring-opacity-5">
          {['Profile', 'Logout'].map(item => (
            <Link
              key={item}
              to={`/${item.toLowerCase()}`}
              className="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600"
            >
              {item}
            </Link>
          ))}
        </div>
      )}
    </div>
  );
};

const Navbar = () => {
  const [mobileOpen, setMobileOpen] = useState(false);
  const { isDark, toggleDarkMode } = useDarkMode();
  const { user } = useAuth();

  return (
    <header className="fixed w-full z-50 bg-white dark:bg-gray-800 shadow-lg">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-16">
        {/* Logo */}
        <Link to="/" className="text-2xl font-extrabold text-blue-600 dark:text-blue-400">
          TravelBuddy
        </Link>
        {/* Desktop Navigation: aligned to right */}
        <nav className="hidden md:flex flex-1 justify-end items-center space-x-6">
          <NavLinks user={user} />
          {user && <UserDropdown />}
        </nav>
        {/* Mobile Navigation Toggle */}
        <div className="md:hidden">
          <button
            onClick={() => setMobileOpen((prev) => !prev)}
            className="text-gray-700 dark:text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-600"
          >
            <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              {mobileOpen ? (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              ) : (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8h16M4 16h16" />
              )}
            </svg>
          </button>
        </div>
      </div>
      {/* Mobile Navigation Container: Always rendered; animation applied via transform */}
      <div
        className={`fixed left-0 z-50 bg-white dark:bg-gray-800 shadow-lg w-64 transition-transform duration-300 ${
          mobileOpen ? 'translate-x-0' : '-translate-x-full'
        }`}
        style={{ top: '4rem', height: 'calc(100vh - 4rem)' }}
      >
        <nav className="flex flex-col space-y-4 p-4">
          <NavLinks user={user} onClick={() => setMobileOpen(false)} />
          {user && <UserDropdown />}
        </nav>
      </div>
    </header>
  );
};

export default Navbar;

================
File: src/components/layout/Notifications.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { Transition } from '@headlessui/react';
import API from '../../api/api';
import { useAuth } from '../../hooks/useAuth';

const NotificationDetails = ({ notification, onBack }) => {
  return (
    <div className="p-4">
      <button 
        onClick={onBack} 
        className="mb-2 text-blue-600 dark:text-blue-400 hover:underline"
      >
        &larr; Back
      </button>
      <h4 className="font-bold text-gray-800 dark:text-gray-200 mb-2">{notification.summary}</h4>
      <p className="text-gray-700 dark:text-gray-300">{notification.details}</p>
    </div>
  );
};

const Notifications = () => {
  const { user } = useAuth();
  const [notifications, setNotifications] = useState([]);
  const [visible, setVisible] = useState(false);
  const [selectedNotification, setSelectedNotification] = useState(null);
  const panelRef = useRef(null);

  // Only fetch notifications if the user is authenticated
  useEffect(() => {
    if (user) {
      API.get('/notifications')
        .then((res) => setNotifications(res.data))
        .catch((err) => console.error(err));
    }
  }, [user]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (panelRef.current && !panelRef.current.contains(event.target)) {
        setVisible(false);
        setSelectedNotification(null);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [panelRef]);

  if (!user) return null; // Only show notifications if authenticated

  return (
    <>
      {/* Fully circular toggle button */}
      <button 
        onClick={() => setVisible(!visible)}
        className="fixed bottom-4 right-4 z-50 w-16 h-16 bg-blue-600 text-white rounded-full shadow-lg flex items-center justify-center focus:outline-none"
      >
        🔔
      </button>
      
      {visible && (
        <div 
          ref={panelRef}
          className="fixed bottom-24 right-4 z-40 w-full sm:w-80 max-w-full bg-white dark:bg-gray-800 shadow-lg rounded p-4"
        >
          {!selectedNotification ? (
            <>
              <h4 className="font-bold text-gray-800 dark:text-gray-200 mb-2">Notifications</h4>
              <div className="max-h-64 overflow-y-auto">
                {notifications.length ? (
                  notifications.map((note) => (
                    <div key={note.id} className="border-b py-2 px-2">
                      <div className="flex justify-between items-center">
                        <p className="text-gray-700 dark:text-gray-300">{note.summary}</p>
                        <button 
                          onClick={() => setSelectedNotification(note)}
                          className="text-blue-600 dark:text-blue-400 hover:underline"
                        >
                          View More
                        </button>
                      </div>
                    </div>
                  ))
                ) : (
                  <p className="text-gray-500 dark:text-gray-400">No notifications.</p>
                )}
              </div>
            </>
          ) : (
            <Transition
              show={selectedNotification !== null}
              enter="transform transition duration-500"
              enterFrom="translate-x-full"
              enterTo="translate-x-0"
              leave="transform transition duration-500"
              leaveFrom="translate-x-0"
              leaveTo="translate-x-full"
            >
              <NotificationDetails 
                notification={selectedNotification} 
                onBack={() => setSelectedNotification(null)} 
              />
            </Transition>
          )}
        </div>
      )}
    </>
  );
};

export default Notifications;

================
File: src/components/layout/Weather.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';

const Weather = ({ destination }) => {
  const [weather, setWeather] = useState(null);

  useEffect(() => {
    if (destination) {
      API.get(`/weather/${destination}`)
        .then((res) => setWeather(res.data))
        .catch((err) => console.error(err));
    }
  }, [destination]);

  if (!weather) return <p className="text-gray-600">Loading weather...</p>;

  return (
    <div className="p-4 border rounded shadow mb-4">
      <h3 className="text-xl font-bold mb-2">Weather Forecast</h3>
      <p className="text-gray-700">
        {weather.description} - {weather.temperature}°C
      </p>
    </div>
  );
};

export default Weather;

================
File: src/components/social/Friends.jsx
================
import React, { useEffect, useState } from 'react';
import API from '../../api/api';
import { Link } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';

const Friends = () => {
  const {user} = useAuth();
  const [friends, setFriends] = useState([]);
  const [pendingRequests, setPendingRequests] = useState([]);

  useEffect(() => {
    const fetchFriends = async () => {
      try {
        const friends = await API.get(`/friends/${user.id}`);
        setFriends(friends.data);
        const pendingRequests = await API.get(`/friends/${user.id}/pending`);
        setPendingRequests(pendingRequests.data);
      } catch (err) {
        console.error('Error fetching friends:', err);
      }
    };
    fetchFriends();
  }, []);

  const acceptRequest = async (userId, requestId) => {
    try {
      const pendingRequests = await API.post(`/friends/${userId}/accept/${requestId}`);
      setPendingRequests(pendingRequests.data);
      const friends = await API.get(`/friends/${userId}`);
      setFriends(friends.data);
    } catch (err) {
      console.error('Error accepting friend request:', err);
    }
  };

  const declineRequest = async (userId, requestId) => {
    try {
      const pendingRequests = await API.post(`/friends/${userId}/decline/${requestId}`);
      setPendingRequests(pendingRequests.data);
    } catch (err) {
      console.error('Error declining friend request:', err);
    }
  };

  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <h2 className="text-3xl font-bold text-center mb-6 text-gray-800 dark:text-gray-200">My Friends</h2>
      <div className="max-w-3xl mx-auto mb-6 grid grid-cols-1 md:grid-cols-2 gap-6">
        {friends.map((friend) => (
            <div key={friend.id} className="bg-white dark:bg-gray-700 rounded-lg shadow p-4 flex items-center space-x-4">
              <img
                src={friend.profilePicture || '/default-avatar.png'}
                alt={friend.username}
                className="w-16 h-16 rounded-full"
              />
              <div className="flex-1">
                <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-200">{friend.username}</h3>
                <p className="text-gray-600 dark:text-gray-300 text-sm">Status: {friend.status || 'Active'}</p>
              </div>
              <Link
                to={`/privatechat/${friend.id}`}
                className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 transition"
              >
                Chat
              </Link>
            </div>
        ))}
      </div>
      {pendingRequests.length > 0 && (
        <div className="max-w-3xl mx-auto mt-8">
          <h3 className="text-2xl font-bold text-gray-800 dark:text-gray-200 mb-4">Pending Friend Requests</h3>
          <ul>
            {pendingRequests.map((req) => (
              <li key={req.id} className="border-b py-2 flex justify-between items-center">
                <span className="text-gray-700 dark:text-gray-300">{req.sender.username}</span>
                <div className="space-x-2">
                  <button onClick={() => acceptRequest(user.id, req.id)} className="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600 transition">
                    Accept
                  </button>
                  <button onClick={() => declineRequest(user.id, req.id)} className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 transition">
                    Decline
                  </button>
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default Friends;

================
File: src/components/social/Reviews.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';

const Reviews = ({ tripId, revieweeId }) => {
  const [reviews, setReviews] = useState([]);
  const [newReview, setNewReview] = useState({ rating: 5, comment: '' });

  useEffect(() => {
    API.get(`/reviews/${revieweeId}`).then((res) => setReviews(res.data));
  }, [revieweeId]);

  const submitReview = async () => {
    const res = await API.post('/reviews', { tripId, reviewee: revieweeId, ...newReview });
    setReviews([...reviews, res.data]);
    setNewReview({ rating: 5, comment: '' });
  };

  const averageRating = reviews.length ? (reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length).toFixed(1) : 'No ratings';

  return (
    <div>
      <h3 className="text-xl font-bold mb-4">User Reviews (Average Rating: {averageRating})</h3>
      <div className="mb-4">
        <select value={newReview.rating} onChange={(e) => setNewReview({ ...newReview, rating: parseInt(e.target.value) })} className="px-4 py-2 border rounded mr-2">
          {[1,2,3,4,5].map(n => (
            <option key={n} value={n}>{n} Star{n > 1 && 's'}</option>
          ))}
        </select>
        <input type="text" placeholder="Write a review..." value={newReview.comment} onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })} className="px-4 py-2 border rounded mr-2 w-2/3" />
        <button onClick={submitReview} className="bg-blue-600 text-white px-4 py-2 rounded">Submit</button>
      </div>
      <ul>
        {reviews.map((rev) => (
          <li key={rev.id} className="border-b py-2">
            <p><strong>{rev.rating} Stars</strong> - {rev.comment}</p>
            <p className="text-gray-500 text-sm">By {rev.reviewer.username} on {new Date(rev.createdAt).toLocaleDateString()}</p>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Reviews;

================
File: src/components/trip/CalendarSync.jsx
================
import React, { useState } from 'react';
import API from '../../api/api';

const CalendarSync = ({ tripId }) => {
  const [synced, setSynced] = useState(false);
  const [error, setError] = useState('');

  const syncCalendar = async () => {
    try {
      await API.post(`/calendar/sync/${tripId}`);
      setSynced(true);
      setTimeout(() => setSynced(false), 3000);
    } catch (err) {
      console.error('Calendar sync error:', err);
      setError('Calendar sync failed.');
      setTimeout(() => setError(''), 3000);
    }
  };

  return (
    <div className="p-4 border rounded shadow mb-4">
      <h3 className="text-xl font-bold mb-2">Calendar Integration</h3>
      <button onClick={syncCalendar} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">
        Sync with Google Calendar
      </button>
      {synced && <p className="mt-2 text-green-600">Calendar synced successfully!</p>}
      {error && <p className="mt-2 text-red-600">{error}</p>}
    </div>
  );
};

export default CalendarSync;

================
File: src/components/trip/CreateTrip.jsx
================
import React, { useState } from 'react';
import API from '../../api/api';

const CreateTrip = () => {
  const [tripData, setTripData] = useState({
    title: '',
    destination: '',
    startDate: '',
    endDate: '',
    description: ''
  });
  const [errors, setErrors] = useState({});

  const onChange = (e) => {
    setTripData({ ...tripData, [e.target.name]: e.target.value });
    setErrors({ ...errors, [e.target.name]: '' });
  };

  // Validate a specific field on blur
  const validateField = (name, value) => {
    let error = '';
    switch (name) {
      case 'title':
        if (!value.trim()) {
          error = 'Trip title is required';
        } else if (value.trim().length < 3) {
          error = 'Trip title must be at least 3 characters';
        }
        break;
      case 'destination':
        if (!value.trim()) {
          error = 'Destination is required';
        }
        break;
      case 'startDate':
        if (!value) {
          error = 'Start date is required';
        }
        break;
      case 'endDate':
        if (!value) {
          error = 'End date is required';
        } else if (tripData.startDate && value < tripData.startDate) {
          error = 'End date must be after the start date';
        }
        break;
      case 'description':
        if (!value.trim()) {
          error = 'Description is required';
        } else if (value.trim().length < 10) {
          error = 'Description should be at least 10 characters long';
        }
        break;
      default:
        break;
    }
    setErrors((prev) => ({ ...prev, [name]: error }));
  };

  const validate = () => {
    let newErrors = {};
    if (!tripData.title.trim()) {
      newErrors.title = 'Trip title is required';
    } else if (tripData.title.trim().length < 3) {
      newErrors.title = 'Trip title must be at least 3 characters';
    }
    if (!tripData.destination.trim()) {
      newErrors.destination = 'Destination is required';
    }
    if (!tripData.startDate) {
      newErrors.startDate = 'Start date is required';
    }
    if (!tripData.endDate) {
      newErrors.endDate = 'End date is required';
    } else if (tripData.startDate && tripData.endDate < tripData.startDate) {
      newErrors.endDate = 'End date must be after the start date';
    }
    if (!tripData.description.trim()) {
      newErrors.description = 'Description is required';
    } else if (tripData.description.trim().length < 10) {
      newErrors.description = 'Description should be at least 10 characters long';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validate()) return;
    try {
      const response = await API.post('/trips', tripData);
      API.navigate(`/trip/${response.data.id}`);
    } catch (error) {
      console.error('Error creating trip:', error);
      setErrors({ form: 'An error occurred while creating the trip. Please try again.' });
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 p-4">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl p-8 w-full max-w-lg">
        <h2 className="text-3xl font-bold text-center text-blue-600 dark:text-blue-400 mb-6">
          Create a New Trip
        </h2>
        {errors.form && <p className="mb-4 text-center text-red-600">{errors.form}</p>}
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-700 dark:text-gray-300">Trip Title</label>
            <input
              type="text"
              name="title"
              value={tripData.title}
              onChange={onChange}
              onBlur={(e) => validateField(e.target.name, e.target.value)}
              className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
            />
            {errors.title && <p className="text-red-600 text-sm mt-1">{errors.title}</p>}
          </div>
          <div className="mb-4">
            <label className="block text-gray-700 dark:text-gray-300">Destination</label>
            <input
              type="text"
              name="destination"
              value={tripData.destination}
              onChange={onChange}
              onBlur={(e) => validateField(e.target.name, e.target.value)}
              className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
            />
            {errors.destination && <p className="text-red-600 text-sm mt-1">{errors.destination}</p>}
          </div>
          <div className="mb-4 grid grid-cols-2 gap-4">
            <div>
              <label className="block text-gray-700 dark:text-gray-300">Start Date</label>
              <input
                type="date"
                name="startDate"
                value={tripData.startDate}
                onChange={onChange}
                onBlur={(e) => validateField(e.target.name, e.target.value)}
                className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
              />
              {errors.startDate && <p className="text-red-600 text-sm mt-1">{errors.startDate}</p>}
            </div>
            <div>
              <label className="block text-gray-700 dark:text-gray-300">End Date</label>
              <input
                type="date"
                name="endDate"
                value={tripData.endDate}
                onChange={onChange}
                onBlur={(e) => validateField(e.target.name, e.target.value)}
                className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
              />
              {errors.endDate && <p className="text-red-600 text-sm mt-1">{errors.endDate}</p>}
            </div>
          </div>
          <div className="mb-4">
            <label className="block text-gray-700 dark:text-gray-300">Description</label>
            <textarea
              name="description"
              value={tripData.description}
              onChange={onChange}
              onBlur={(e) => validateField(e.target.name, e.target.value)}
              className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
              rows="4"
            ></textarea>
            {errors.description && <p className="text-red-600 text-sm mt-1">{errors.description}</p>}
          </div>
          <button type="submit" className="w-full bg-blue-600 dark:bg-blue-500 text-white py-2 rounded hover:bg-blue-700 transition">
            Create Trip
          </button>
        </form>
      </div>
    </div>
  );
};

export default CreateTrip;

================
File: src/components/trip/Expenses.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';

const Expenses = ({ tripId }) => {
  const [expenses, setExpenses] = useState([]);
  const [newExpense, setNewExpense] = useState({ payer: '', amount: '', purpose: '' });

  useEffect(() => {
    API.get(`/trips/${tripId}/expenses`).then((res) => setExpenses(res.data));
  }, [tripId]);

  const addExpense = async () => {
    const res = await API.post(`/trips/${tripId}/expenses`, newExpense);
    setExpenses([...expenses, res.data]);
    setNewExpense({ payer: '', amount: '', purpose: '' });
  };

  return (
    <div>
      <h3 className="text-xl font-bold mb-4">Expenses</h3>
      <div className="mb-4">
        <input type="text" placeholder="Payer" value={newExpense.payer} onChange={(e) => setNewExpense({ ...newExpense, payer: e.target.value })} className="px-4 py-2 border rounded mr-2" />
        <input type="number" placeholder="Amount" value={newExpense.amount} onChange={(e) => setNewExpense({ ...newExpense, amount: e.target.value })} className="px-4 py-2 border rounded mr-2" />
        <input type="text" placeholder="Purpose" value={newExpense.purpose} onChange={(e) => setNewExpense({ ...newExpense, purpose: e.target.value })} className="px-4 py-2 border rounded mr-2" />
        <button onClick={addExpense} className="bg-blue-600 text-white px-4 py-2 rounded">Add Expense</button>
      </div>
      <ul>
        {expenses.map((exp) => (
          <li key={exp.id} className="border-b py-2">
            <strong>{exp.payer}</strong> spent <strong>${exp.amount}</strong> on {exp.purpose}
          </li>
        ))}
      </ul>
      <div className="mt-4">
        <p className="text-gray-700">Expense split summary will be calculated here.</p>
      </div>
    </div>
  );
};

export default Expenses;

================
File: src/components/trip/Itinerary.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';

const Itinerary = ({ tripId }) => {
  const [items, setItems] = useState([]);

  useEffect(() => {
    API.get(`/trips/${tripId}/itinerary`).then((res) => setItems(res.data));
  }, [tripId]);

  const exportPdf = async () => {
    const res = await API.get(`/trips/${tripId}/itinerary/pdf`, { responseType: 'blob' });
    const url = window.URL.createObjectURL(new Blob([res.data]));
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'itinerary.pdf');
    document.body.appendChild(link);
    link.click();
  };

  return (
    <div>
      <h3 className="text-xl font-bold mb-4">Itinerary</h3>
      <ul>
        {items.map((item) => (
          <li key={item.id} className="border-b py-2">
            <strong>{item.activityName}</strong> on {new Date(item.activityDate).toLocaleDateString()} at {item.location}
            <p>{item.notes}</p>
          </li>
        ))}
      </ul>
      <button onClick={exportPdf} className="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">
        Export as PDF
      </button>
    </div>
  );
};

export default Itinerary;

================
File: src/components/trip/JoinRequests
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';

const JoinRequests = ({ tripId, initialRequests }) => {
  const [requests, setRequests] = useState(initialRequests || []);

  useEffect(() => {
    setRequests(initialRequests || []);
  }, [initialRequests]);

  const handleApprove = async (userId) => {
    try {
      await API.post(`/api/trips/approve/${tripId}/${userId}`);
      setRequests(requests.filter(req => req.id !== userId));
    } catch (err) {
      console.error('Error approving join request:', err);
    }
  };

  const handleDecline = async (userId) => {
    try {
      await API.post(`/api/trips/decline/${tripId}/${userId}`);
      setRequests(requests.filter(req => req.id !== userId));
    } catch (err) {
      console.error('Error declining join request:', err);
    }
  };

  if (!requests || requests.length === 0) {
    return <p className="text-gray-600 dark:text-gray-300">No pending join requests.</p>;
  }

  return (
    <div>
      <h3 className="text-2xl font-bold mb-4 text-gray-800 dark:text-gray-200">Pending Join Requests</h3>
      <div className="grid grid-cols-1 gap-4">
        {requests.map((req) => (
          <div key={req.id} className="flex items-center bg-white dark:bg-gray-700 p-4 rounded-lg shadow-md">
            <img
              src={req.profilePicture || '/default-avatar.png'}
              alt={req.username}
              className="w-12 h-12 rounded-full mr-4"
            />
            <div className="flex-1">
              <p className="text-lg font-semibold text-gray-800 dark:text-gray-200">{req.username}</p>
              {req.bio && <p className="text-sm text-gray-600 dark:text-gray-300">{req.bio}</p>}
            </div>
            <div className="flex space-x-2">
              <button
                onClick={() => handleApprove(req.id)}
                className="text-green-500 hover:text-green-600 transition"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </button>
              <button
                onClick={() => handleDecline(req.id)}
                className="text-red-500 hover:text-red-600 transition"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default JoinRequests;

================
File: src/components/trip/PackingChecklist.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';

const PackingChecklist = ({ tripId }) => {
  const [items, setItems] = useState([]);
  const [newItem, setNewItem] = useState('');

  useEffect(() => {
    API.get(`/trips/${tripId}/checklist`).then((res) => setItems(res.data));
  }, [tripId]);

  const addItem = async () => {
    if (newItem.trim()) {
      const res = await API.post(`/trips/${tripId}/checklist`, { itemName: newItem });
      setItems([...items, res.data]);
      setNewItem('');
    }
  };

  const toggleItem = async (itemId) => {
    const res = await API.put(`/trips/${tripId}/checklist/${itemId}/toggle`);
    setItems(items.map((item) => (item.id === itemId ? res.data : item)));
  };

  const deleteItem = async (itemId) => {
    await API.delete(`/trips/${tripId}/checklist/${itemId}`);
    setItems(items.filter((item) => item.id !== itemId));
  };

  return (
    <div>
      <h3 className="text-xl font-bold mb-4">Packing Checklist</h3>
      <div className="mb-4">
        <input type="text" value={newItem} onChange={(e) => setNewItem(e.target.value)}
          placeholder="New item" className="px-4 py-2 border rounded w-full" />
        <button onClick={addItem} className="mt-2 bg-blue-600 text-white px-4 py-2 rounded">Add Item</button>
      </div>
      <ul>
        {items.map((item) => (
          <li key={item.id} className="flex justify-between items-center border-b py-2">
            <span className={item.isChecked ? 'line-through text-gray-500' : 'text-gray-800'}>
              {item.itemName}
            </span>
            <div className="space-x-2">
              <button onClick={() => toggleItem(item.id)} className="bg-green-500 text-white px-2 py-1 rounded">
                {item.isChecked ? 'Uncheck' : 'Check'}
              </button>
              <button onClick={() => deleteItem(item.id)} className="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default PackingChecklist;

================
File: src/components/trip/PersonalItinerary.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';

const PersonalItinerary = () => {
  const [itinerary, setItinerary] = useState([]);
  const [newActivity, setNewActivity] = useState({ activityName: '', date: '', time: '', location: '', notes: '' });

  useEffect(() => {
    API.get('/itinerary/personal')
      .then((res) => setItinerary(res.data))
      .catch((err) => console.error(err));
  }, []);

  const addActivity = async () => {
    if (newActivity.activityName.trim()) {
      const res = await API.post('/itinerary/personal', newActivity);
      setItinerary([...itinerary, res.data]);
      setNewActivity({ activityName: '', date: '', time: '', location: '', notes: '' });
    }
  };

  return (
    <div>
      <h3 className="text-xl font-bold mb-4">Personal Itinerary</h3>
      <div className="mb-4">
        <input type="text" placeholder="Activity Name" value={newActivity.activityName} onChange={(e) => setNewActivity({ ...newActivity, activityName: e.target.value })} className="px-4 py-2 border rounded w-full mb-2" />
        <input type="date" value={newActivity.date} onChange={(e) => setNewActivity({ ...newActivity, date: e.target.value })} className="px-4 py-2 border rounded w-full mb-2" />
        <input type="time" value={newActivity.time} onChange={(e) => setNewActivity({ ...newActivity, time: e.target.value })} className="px-4 py-2 border rounded w-full mb-2" />
        <input type="text" placeholder="Location" value={newActivity.location} onChange={(e) => setNewActivity({ ...newActivity, location: e.target.value })} className="px-4 py-2 border rounded w-full mb-2" />
        <textarea placeholder="Notes" value={newActivity.notes} onChange={(e) => setNewActivity({ ...newActivity, notes: e.target.value })} className="px-4 py-2 border rounded w-full mb-2"></textarea>
        <button onClick={addActivity} className="bg-blue-600 text-white px-4 py-2 rounded">Add Activity</button>
      </div>
      <ul>
        {itinerary.map((activity) => (
          <li key={activity.id} className="border-b py-2">
            <strong>{activity.activityName}</strong> on {new Date(activity.date).toLocaleDateString()} at {activity.time} in {activity.location}
            <p>{activity.notes}</p>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default PersonalItinerary;

================
File: src/components/trip/UserReliability.jsx
================
import React, { useEffect, useState } from 'react';
import API from '../../api/api';

const UserReliability = ({ userId }) => {
  const [rating, setRating] = useState(null);

  useEffect(() => {
    API.get(`/reviews/user/${userId}/average`)
      .then((res) => setRating(res.data.averageRating))
      .catch((err) => console.error(err));
  }, [userId]);

  return (
    <div className="mt-4">
      <p className="text-lg font-bold">User Reliability: {rating ? `${rating} / 5` : 'No ratings yet'}</p>
    </div>
  );
};

export default UserReliability;

================
File: src/components/voting/Voting.jsx
================
import React from 'react';

const Voting = ({ category, options, onVote, currentVote, currentUser, organizerId, voteCreatorId }) => {
  // Determine if the current user is allowed to update/finalize the vote:
  // Only the organizer may update, and not if they are the vote initiator.
  const canUpdate = user => (user.id === organizerId && user.id !== voteCreatorId);

  return (
    <div className="flex flex-col space-y-4">
      {options.map((option) => (
        <button
          key={option.value}
          onClick={() => onVote(category, option.value)}
          disabled={!canUpdate(currentUser)}
          className={`px-4 py-2 rounded transition ${
            currentVote === option.value
              ? 'bg-blue-600 text-white'
              : 'bg-gray-200 text-gray-700 hover:bg-blue-400'
          }`}
        >
          {option.label} ({option.votes})
        </button>
      ))}
      {!canUpdate(currentUser) && (
        <p className="text-sm text-gray-600 dark:text-gray-400">
          Only the organizer can finalize or update the vote.
        </p>
      )}
    </div>
  );
};

export default Voting;

================
File: src/hooks/useAuth.js
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import jwtDecode from 'jwt-decode';
import API from '../api/api';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const initAuth = async () => {
      const token = localStorage.getItem('token');
      if (token) {
        try {
          const response = await API.get('/auth/me');
          setUser(response.data);
        } catch (error) {
          localStorage.removeItem('token');
        }
      }
      setLoading(false);
    };

    initAuth();
  }, []);

  const login = async (credentials) => {
    const response = await API.post('/auth/login', credentials);
    const { token, user: userData } = response.data;
    localStorage.setItem('token', token);
    setUser(userData);
    return userData;
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
  };

  const isAuthenticated = () => {
    const token = localStorage.getItem('token');
    if (!token) return false;
    try {
      const decoded = jwtDecode(token);
      return decoded.exp > Date.now() / 1000;
    } catch {
      return false;
    }
  };

  return (
    <AuthContext.Provider value={{ user, loading, login, logout, isAuthenticated }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

================
File: src/hooks/useDarkMode.js
================
import { useState, useEffect } from 'react';

export const useDarkMode = () => {
  const [isDark, setIsDark] = useState(false);
  
  useEffect(() => {
    const saved = localStorage.getItem('darkMode') === 'true';
    setIsDark(saved);
    document.documentElement.classList.toggle('dark', saved);
  }, []);
  
  const toggleDarkMode = () => {
    setIsDark((prev) => {
      const newVal = !prev;
      localStorage.setItem('darkMode', newVal);
      document.documentElement.classList.toggle('dark', newVal);
      return newVal;
    });
  };
  
  return { isDark, toggleDarkMode };
};

================
File: src/hooks/useStompClient.js
================
import { useState, useEffect } from 'react';
import { Client } from '@stomp/stompjs';

export const useStompClient = (brokerUrl) => {
  const [client, setClient] = useState(null);
  const [connected, setConnected] = useState(false);

  useEffect(() => {
    const stompClient = new Client({
      brokerURL: brokerUrl,
      reconnectDelay: 5000,
      heartbeatIncoming: 4000,
      heartbeatOutgoing: 4000,
      // onConnect is called once the connection is established
      onConnect: () => {
        setConnected(true);
        console.log('STOMP client connected');
      },
      onDisconnect: () => {
        setConnected(false);
        console.log('STOMP client disconnected');
      }
    });
    stompClient.activate();
    setClient(stompClient);
    return () => {
      stompClient.deactivate();
    };
  }, [brokerUrl]);

  return { client, connected };
};

================
File: src/hooks/useTripAccess.js
================
import { useAuth } from './useAuth';

export const useTripAccess = (trip) => {
  const { user } = useAuth();
  if (!trip || !user) return false;
  return trip.members?.some((member) => member.id === user.id);
};

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.jsx
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import ErrorBoundary from './components/common/ErrorBoundary';
import Navbar from './components/layout/Navbar';
import Footer from './components/layout/Footer';
import Notifications from './components/layout/Notifications';
import Login from './components/auth/Login';
import Register from './components/auth/Register';
import ProtectedRoute from './components/common/ProtectedRoute';
import Profile from './components/auth/Profile';
import Dashboard from './components/dashboard/Dashboard';
import TripDetails from './components/dashboard/TripDetails';
import GroupChat from './components/chat/GroupChat';
import PrivateChat from './components/chat/PrivateChat';
import Friends from './components/social/Friends';
import CalendarSync from './components/trip/CalendarSync';
import CreateTrip from './components/trip/CreateTrip';
import AdminDashboard from './components/admin/AdminDashboard';
import AdminUsers from './components/admin/AdminUsers';
import AdminTrips from './components/admin/AdminTrips';
import { AuthProvider } from './hooks/useAuth';
import { Toaster } from 'react-hot-toast';

function App() {
  return (
    <AuthProvider>
      <Router>
        <ErrorBoundary>
          <div className="min-h-screen flex flex-col">
            <Navbar />
            <Notifications />
            <main className="flex-1 pt-16">
              <Routes>
                <Route path="/login" element={<Login />} />
                <Route path="/register" element={<Register />} />
                <Route 
                  path="/*" 
                  element={
                    <ProtectedRoute>
                      <Routes>
                        <Route path="/" element={<Dashboard />} />
                        <Route path="/profile" element={<Profile />} />
                        <Route path="/trips/create" element={<CreateTrip /> } />
                        <Route path="/trips/:id" element={<TripDetails />} />
                        <Route path="/trips/:id/chat" element={<GroupChat />} />
                        <Route path="/friends/:friendId/chat" element={<PrivateChat />} />
                        <Route path="/friends" element={<Friends />} />
                        <Route path="/calendar" element={<CalendarSync tripId={1} />} />
                        <Route path="/admin" element={<AdminDashboard />} />
                        <Route path="/admin/users" element={<AdminUsers />} />
                        <Route path="/admin/trips" element={<AdminTrips />} />
                      </Routes>
                    </ProtectedRoute>
                  }
                />
              </Routes>
            </main>
            <Toaster position="bottom-left" />
            <Footer />
          </div>
        </ErrorBoundary>
      </Router>
    </AuthProvider>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Add any custom global styles here */

================
File: src/index.js
================
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css'; // Global Tailwind CSS and custom styles

const container = document.getElementById('root');
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "travel-buddy-client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@headlessui/react": "^1.7.7",
    "@stomp/stompjs": "^7.0.0",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^0.27.2",
    "jwt-decode": "^3.1.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hot-toast": "^2.5.1",
    "react-router-dom": "^6.3.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "export NODE_OPTIONS=--openssl-legacy-provider && react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ],
    "rules": {
      "react/jsx-uses-react": "off",
      "react/react-in-jsx-scope": "off"
    }
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "ajv": "^7.2.4",
    "autoprefixer": "^10.4.7",
    "postcss": "^8.4.14",
    "tailwindcss": "^3.1.8"
  }
}

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: tailwind.config.js
================
module.exports = {
    darkMode: 'class', // Enable dark mode via a CSS class
    content: [
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }



================================================================
End of Codebase
================================================================
