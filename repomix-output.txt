This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-22T01:14:12.676Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  index.html
  manifest.json
  robots.txt
src/
  api/
    api.js
  components/
    admin/
      AdminDashboard.jsx
      AdminTrips.jsx
      AdminUsers.jsx
    auth/
      register-steps/
        Step1.jsx
        Step2.jsx
        Step3.jsx
      Login.jsx
      Profile.jsx
      Register.jsx
    chat/
      layouts/
        ChatLayout.jsx
        MessageList.jsx
      ChatComponents.jsx
      ChatPollComponents.jsx
      GroupChat.jsx
      OnlineUsers.jsx
      PrivateChat.jsx
      PrivateChatPopup.jsx
    common/
      ErrorBoundary.jsx
      LoadingSpinner.jsx
      ProtectedRoute.jsx
    contexts/
      ChatContext.jsx
    dashboard/
      Dashboard.jsx
      TripCard.jsx
      TripDetails.jsx
    layout/
      Footer.jsx
      Navbar.jsx
      Notifications.jsx
      Weather.jsx
    social/
      Friends.jsx
      Reviews.jsx
    trip/
      CalendarSync.jsx
      CreateTrip.jsx
      Expenses.jsx
      Itinerary.jsx
      JoinRequests.jsx
      PackingChecklist.jsx
      PersonalItinerary.jsx
    voting/
      Voting.jsx
  hooks/
    useAuth.js
    useChatMessages.js
    useDarkMode.js
    useStompClient.js
    useTripAccess.js
  App.css
  App.jsx
  App.test.js
  index.css
  index.js
  logo.svg
  reportWebVitals.js
  setupTests.js
.gitignore
package.json
README.md
tailwind.config.js

================================================================
Files
================================================================

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>TravelBuddy</title>
  </head>
  <body class="bg-gray-50 dark:bg-gray-900">
    <div id="root"></div>
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: src/api/api.js
================
import axios from 'axios';
import toast from 'react-hot-toast';

const API = axios.create({
  baseURL: 'http://localhost:8080/api',
});

API.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});

API.interceptors.response.use(
  (response) => response,
  (error) => {
    const errorMessage = error.response?.data || error.message;
    console.error('API error:', errorMessage);
    toast.error(errorMessage);
  }
);

export default API;

================
File: src/components/admin/AdminDashboard.jsx
================
import React from 'react';
import { Link } from 'react-router-dom';

const AdminDashboard = () => {
  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <h1 className="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-gray-200">Admin Dashboard</h1>
      <div className="max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-6">
        <Link to="/admin/users" className="block bg-white dark:bg-gray-700 rounded-lg shadow p-6 hover:shadow-xl transition">
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200">Manage Users</h2>
          <p className="text-gray-600 dark:text-gray-300">View, edit, and delete users.</p>
        </Link>
        <Link to="/admin/trips" className="block bg-white dark:bg-gray-700 rounded-lg shadow p-6 hover:shadow-xl transition">
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200">Manage Trips</h2>
          <p className="text-gray-600 dark:text-gray-300">Review and manage all trips.</p>
        </Link>
      </div>
    </div>
  );
};

export default AdminDashboard;

================
File: src/components/admin/AdminTrips.jsx
================
import React, { useEffect, useState } from 'react';
import API from '../../api/api';

const AdminTrips = () => {
  const [trips, setTrips] = useState([]);

  useEffect(() => {
    API.get('/trips')
      .then((res) => setTrips(res.data))
      .catch((err) => console.error(err));
  }, []);

  const deleteTrip = async (tripId) => {
    try {
      await API.delete(`/trips/${tripId}`);
      setTrips(trips.filter(trip => trip.id !== tripId));
    } catch (err) {
      console.error('Error deleting trip:', err);
    }
  };

  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <h1 className="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-gray-200">Manage Trips</h1>
      <table className="min-w-full bg-white dark:bg-gray-700">
        <thead>
          <tr>
            <th className="py-2 px-4 border">ID</th>
            <th className="py-2 px-4 border">Title</th>
            <th className="py-2 px-4 border">Destination</th>
            <th className="py-2 px-4 border">Status</th>
            <th className="py-2 px-4 border">Organizer</th>
            <th className="py-2 px-4 border">Actions</th>
          </tr>
        </thead>
        <tbody>
          {trips.map((trip) => (
            <tr key={trip.id} className="text-center">
              <td className="py-2 px-4 border">{trip.id}</td>
              <td className="py-2 px-4 border">{trip.title}</td>
              <td className="py-2 px-4 border">{trip.destination}</td>
              <td className="py-2 px-4 border">{trip.status}</td>
              <td className="py-2 px-4 border">{trip.organizer.username}</td>
              <td className="py-2 px-4 border">
                <button onClick={() => deleteTrip(trip.id)} className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 transition">
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AdminTrips;

================
File: src/components/admin/AdminUsers.jsx
================
import React, { useEffect, useState } from 'react';
import API from '../../api/api';

const AdminUsers = () => {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    API.get('/users')
      .then((res) => setUsers(res.data))
      .catch((err) => console.error(err));
  }, []);

  const deleteUser = async (userId) => {
    try {
      await API.delete(`/users/${userId}`);
      setUsers(users.filter(user => user.id !== userId));
    } catch (err) {
      console.error('Error deleting user:', err);
    }
  };

  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <h1 className="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-gray-200">Manage Users</h1>
      <table className="min-w-full bg-white dark:bg-gray-700">
        <thead>
          <tr>
            <th className="py-2 px-4 border">ID</th>
            <th className="py-2 px-4 border">Username</th>
            <th className="py-2 px-4 border">Email</th>
            <th className="py-2 px-4 border">Role</th>
            <th className="py-2 px-4 border">Actions</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id} className="text-center">
              <td className="py-2 px-4 border">{user.id}</td>
              <td className="py-2 px-4 border">{user.username}</td>
              <td className="py-2 px-4 border">{user.email}</td>
              <td className="py-2 px-4 border">{user.role}</td>
              <td className="py-2 px-4 border">
                <button onClick={() => deleteUser(user.id)} className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 transition">
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AdminUsers;

================
File: src/components/auth/register-steps/Step1.jsx
================
import React, { useState, useEffect } from 'react';

const Step1 = ({ formData, onChange, onValidityChange }) => {
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});

  const validate = () => {
    let newErrors = {};

    // Username validations
    if (!formData.username.trim()) {
      newErrors.username = 'Username is required';
    } else if (formData.username.trim().length < 3) {
      newErrors.username = 'Username must be at least 3 characters';
    } else if (/\s/.test(formData.username)) {
      newErrors.username = 'Username should not contain spaces';
    }

    // Password validations
    if (!formData.password.trim()) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 8) {
      newErrors.password = 'Password must be at least 8 characters';
    } else if (!/(?=.*\d)/.test(formData.password)) {
      newErrors.password = 'Password must contain at least one digit';
    } else if (!/(?=.*[!@#$%^&*])/.test(formData.password)) {
      newErrors.password = 'Password must contain at least one special character';
    }

    setErrors(newErrors);
    onValidityChange(Object.keys(newErrors).length === 0);
  };

  useEffect(() => {
    validate();
  }, [formData, onValidityChange]);

  const handleBlur = (e) => {
    setTouched({ ...touched, [e.target.name]: true });
  };

  return (
    <>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">Username</label>
        <input
          type="text"
          name="username"
          value={formData.username}
          onChange={onChange}
          onBlur={handleBlur}
          className="mt-1 w-full px-4 py-2 border rounded"
        />
        {touched.username && errors.username && (
          <p className="text-red-600 text-sm mt-1">{errors.username}</p>
        )}
      </div>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">
          Password (min 8 characters, include a digit and special character)
        </label>
        <input
          type="password"
          name="password"
          value={formData.password}
          onChange={onChange}
          onBlur={handleBlur}
          className="mt-1 w-full px-4 py-2 border rounded"
        />
        {touched.password && errors.password && (
          <p className="text-red-600 text-sm mt-1">{errors.password}</p>
        )}
      </div>
    </>
  );
};

export default Step1;

================
File: src/components/auth/register-steps/Step2.jsx
================
import React, { useState, useEffect } from 'react';

const Step2 = ({ formData, onChange, onValidityChange }) => {
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});

  const validate = () => {
    let newErrors = {};
    if (!formData.gender) newErrors.gender = 'Gender is required';
    if (!formData.email.trim()) newErrors.email = 'Email is required';
    else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(formData.email))
      newErrors.email = 'Invalid email address';
    setErrors(newErrors);
    onValidityChange(Object.keys(newErrors).length === 0);
  };

  useEffect(() => {
    validate();
  }, [formData, onValidityChange]);

  const handleBlur = (e) => {
    setTouched({ ...touched, [e.target.name]: true });
  };

  return (
    <>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">Gender</label>
        <select
          name="gender"
          value={formData.gender}
          onChange={onChange}
          onBlur={handleBlur}
          className="mt-1 w-full px-4 py-2 border rounded"
        >
          <option value="">Select gender</option>
          <option value="male">Male</option>
          <option value="female">Female</option>
        </select>
        {touched.gender && errors.gender && (
          <p className="text-red-600 text-sm mt-1">{errors.gender}</p>
        )}
      </div>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">Email</label>
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={onChange}
          onBlur={handleBlur}
          className="mt-1 w-full px-4 py-2 border rounded"
        />
        {touched.email && errors.email && (
          <p className="text-red-600 text-sm mt-1">{errors.email}</p>
        )}
      </div>
    </>
  );
};

export default Step2;

================
File: src/components/auth/register-steps/Step3.jsx
================
import React, { useState, useEffect } from 'react';

const Step3 = ({ formData, onChange, onValidityChange }) => {
  // Optional fields; we assume they are always valid
  useEffect(() => {
    onValidityChange(true);
  }, [formData, onValidityChange]);

  return (
    <>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">Profile Picture URL</label>
        <input
          type="url"
          name="profilePicture"
          value={formData.profilePicture}
          onChange={onChange}
          className="mt-1 w-full px-4 py-2 border rounded"
        />
      </div>
      <div className="mb-4">
        <label className="block text-gray-700 dark:text-gray-300">Bio (max 512 characters)</label>
        <textarea
          name="bio"
          value={formData.bio}
          onChange={onChange}
          className="mt-1 w-full px-4 py-2 border rounded"
          maxLength="512"
        ></textarea>
      </div>
    </>
  );
};

export default Step3;

================
File: src/components/auth/Login.jsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import API from '../../api/api';
import toast from 'react-hot-toast';

const Login = () => {
  const navigate = useNavigate();
  const [creds, setCreds] = useState({ username: '', password: '' });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const { login } = useAuth();

  const onChange = (e) => {
    setCreds({ ...creds, [e.target.name]: e.target.value });
    setErrors({ ...errors, [e.target.name]: '', form: '' });
  };

  const validateField = (name, value) => {
    let message = '';
    if (!value.trim()) {
      message = `${name.charAt(0).toUpperCase() + name.slice(1)} is required`;
    }
    setErrors((prev) => ({ ...prev, [name]: message }));
    return message === '';
  };

  const onBlur = (e) => {
    validateField(e.target.name, e.target.value);
  };

  const validate = () => {
    const usernameValid = validateField('username', creds.username);
    const passwordValid = validateField('password', creds.password);
    return usernameValid && passwordValid;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validate()) return;

    setIsLoading(true);
    setErrors({});
    try {
      const response = await API.post('/auth/login', creds);
      const { token, userDto } = response.data;
      console.log('User logged in:', userDto);
      
      // Store token and user data
      localStorage.setItem('token', token);
      login({ token, user: userDto });
      
      navigate('/');
    } catch (err) {
      setErrors({ form: 'Login failed. Please try again.' });
      console.log('Login error:', err);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl p-8 max-w-md w-full transform transition duration-500 hover:scale-105">
        <h2 className="text-3xl font-bold text-center text-blue-600 dark:text-blue-400 mb-6">Login</h2>
        
        {errors.form && (
          <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
            {errors.form}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-700 dark:text-gray-300">Username</label>
            <input
              type="text"
              name="username"
              value={creds.username}
              onChange={onChange}
              onBlur={onBlur}
              disabled={isLoading}
              className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
            />
            {errors.username && (
              <p className="text-red-600 text-sm mt-1">{errors.username}</p>
            )}
          </div>

          <div className="mb-6">
            <label className="block text-gray-700 dark:text-gray-300">Password</label>
            <input
              type="password"
              name="password"
              value={creds.password}
              onChange={onChange}
              onBlur={onBlur}
              disabled={isLoading}
              className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
            />
            {errors.password && (
              <p className="text-red-600 text-sm mt-1">{errors.password}</p>
            )}
          </div>

          <button
            type="submit"
            disabled={isLoading}
            className={`w-full bg-blue-600 dark:bg-blue-500 text-white py-2 rounded hover:bg-blue-700 transition ${
              isLoading ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          >
            {isLoading ? 'Logging in...' : 'Login'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default Login;

================
File: src/components/auth/Profile.jsx
================
import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import API from '../../api/api';
import { 
  Star, 
  MapPin, 
  Users, 
  Calendar, 
  Clock, 
  Edit, 
  Check, 
  UserPlus, 
  Mail,
  CheckCircle,
  Clock as PendingClock
} from 'lucide-react';
import toast from 'react-hot-toast';

const StarRating = ({ rating, onRatingChange, readonly = false }) => {
  return (
    <div className="flex gap-1">
      {[1, 2, 3, 4, 5].map((star) => (
        <button
          key={star}
          onClick={() => !readonly && onRatingChange(star)}
          disabled={readonly}
          className={`${
            star <= rating 
              ? 'text-yellow-400' 
              : 'text-gray-300 dark:text-gray-600'
          } ${!readonly && 'hover:scale-110'} transition-transform`}
        >
          <Star className="w-6 h-6 fill-current" />
        </button>
      ))}
    </div>
  );
};

const Profile = () => {
  const { username } = useParams();
  const { user: currentUser } = useAuth();
  const [profile, setProfile] = useState(null);
  const [trips, setTrips] = useState([]);
  const [reviews, setReviews] = useState([]);
  const [userReview, setUserReview] = useState(null);
  const [newReview, setNewReview] = useState({
    rating: 5,
    comment: ''
  });
  const [loading, setLoading] = useState(true);
  const [editing, setEditing] = useState(false);
  const [editedProfile, setEditedProfile] = useState(null);
  const [friendStatus, setFriendStatus] = useState(null); // 'friends', 'pending', null

  const isOwnProfile = currentUser?.username === username;

  useEffect(() => {
    fetchProfileData();
  }, [username, currentUser]);

  const fetchProfileData = async () => {
    try {
      setLoading(true);
      const [profileRes, tripsRes, reviewsRes, friendStatusRes] = await Promise.all([
        API.get(`/users/${username}`),
        API.get(`/users/${username}/trips`),
        API.get(`/reviews/${username}`),
        !isOwnProfile ? API.get(`/friends/status/${username}`) : Promise.resolve({ data: null })
      ]);

      setProfile(profileRes.data);
      setEditedProfile(profileRes.data);
      setTrips(tripsRes.data);
      setReviews(reviewsRes.data);
      setFriendStatus(friendStatusRes.data);

      // Find current user's review if it exists
      if (!isOwnProfile) {
        const userReview = reviewsRes.data.find(
          review => review.reviewer.username === currentUser?.username
        );
        setUserReview(userReview);
      }
    } catch (err) {
      console.error('Error fetching profile data:', err);
      toast.error('Failed to load profile');
    } finally {
      setLoading(false);
    }
  };

  const submitReview = async (e) => {
    e.preventDefault();
    if (!newReview.comment.trim()) {
      toast.error('Please enter a review comment');
      return;
    }

    try {
      const response = await API.post('/api/reviews', {
        reviewee: username,
        ...newReview
      });

      setReviews(response.data);
      setUserReview(response.data.find(r => r.reviewer.username === currentUser.username));
      setNewReview({ rating: 5, comment: '' });
      toast.success('Review submitted successfully');
    } catch (err) {
      console.error('Error submitting review:', err);
      toast.error('Failed to submit review');
    }
  };

  const updateProfile = async () => {
    try {
      const response = await API.put('/api/users/updateProfile', editedProfile);
      setProfile(response.data);
      setEditing(false);
      toast.success('Profile updated successfully');
    } catch (err) {
      console.error('Error updating profile:', err);
      toast.error('Failed to update profile');
    }
  };

  const sendFriendRequest = async () => {
    try {
      await API.post(`/api/friends/request/${profile.id}`);
      setFriendStatus('pending');
      toast.success('Friend request sent');
    } catch (err) {
      console.error('Error sending friend request:', err);
      toast.error('Failed to send friend request');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <p className="text-gray-500">User not found</p>
      </div>
    );
  }

  const averageRating = reviews.length
    ? (reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length).toFixed(1)
    : 'No ratings';

  return (
    <div className="container mx-auto px-4 py-8 max-w-6xl">
      {/* Profile Header */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden mb-8">
        <div className="h-32 bg-gradient-to-r from-blue-500 to-purple-600"></div>
        <div className="px-6 py-4 relative">
          <div className="flex flex-col sm:flex-row items-center gap-6">
            {editing ? (
              <div className="relative group">
                <img
                  src={editedProfile.profilePicture || '/default-avatar.png'}
                  alt={editedProfile.username}
                  className="w-32 h-32 rounded-full object-cover shadow-lg border-4 border-white dark:border-gray-800 -mt-16"
                />
                <input
                  type="text"
                  value={editedProfile.profilePicture || ''}
                  onChange={(e) => setEditedProfile({ 
                    ...editedProfile, 
                    profilePicture: e.target.value 
                  })}
                  placeholder="Profile picture URL"
                  className="absolute bottom-0 left-0 w-full px-2 py-1 text-sm bg-black/50 text-white"
                />
              </div>
            ) : (
              <img
                src={profile.profilePicture || '/default-avatar.png'}
                alt={profile.username}
                className="w-32 h-32 rounded-full object-cover shadow-lg border-4 border-white dark:border-gray-800 -mt-16"
              />
            )}
            <div className="text-center sm:text-left flex-1">
              <div className="flex items-center justify-center sm:justify-between">
                <div>
                  {editing ? (
                    <input
                      type="text"
                      value={editedProfile.username}
                      onChange={(e) => setEditedProfile({ 
                        ...editedProfile, 
                        username: e.target.value 
                      })}
                      className="text-3xl font-bold text-gray-800 dark:text-gray-200 bg-transparent border-b focus:outline-none focus:border-blue-500"
                    />
                  ) : (
                    <h1 className="text-3xl font-bold text-gray-800 dark:text-gray-200">
                      {profile.username}
                    </h1>
                  )}
                </div>
                {isOwnProfile ? (
                  <div>
                    {editing ? (
                      <button
                        onClick={updateProfile}
                        className="ml-4 p-2 text-green-500 hover:text-green-600 transition-colors"
                      >
                        <Check className="w-6 h-6" />
                      </button>
                    ) : (
                      <button
                        onClick={() => setEditing(true)}
                        className="ml-4 p-2 text-blue-500 hover:text-blue-600 transition-colors"
                      >
                        <Edit className="w-6 h-6" />
                      </button>
                    )}
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    {friendStatus === 'friends' ? (
                      <span className="flex items-center gap-2 text-green-500">
                        <CheckCircle className="w-5 h-5" />
                        Friends
                      </span>
                    ) : friendStatus === 'pending' ? (
                      <span className="flex items-center gap-2 text-yellow-500">
                        <PendingClock className="w-5 h-5" />
                        Request Pending
                      </span>
                    ) : (
                      <button
                        onClick={sendFriendRequest}
                        className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                      >
                        <UserPlus className="w-5 h-5" />
                        Add Friend
                      </button>
                    )}
                    <button
                      onClick={() => window.location.href = `mailto:${profile.email}`}
                      className="p-2 text-gray-500 hover:text-gray-600 transition-colors"
                    >
                      <Mail className="w-5 h-5" />
                    </button>
                  </div>
                )}
              </div>
              {editing ? (
                <textarea
                  value={editedProfile.bio || ''}
                  onChange={(e) => setEditedProfile({ 
                    ...editedProfile, 
                    bio: e.target.value 
                  })}
                  placeholder="Tell us about yourself..."
                  className="w-full mt-2 px-3 py-2 text-gray-600 dark:text-gray-400 bg-transparent border rounded focus:outline-none focus:border-blue-500"
                  rows="3"
                />
              ) : (
                <p className="text-gray-600 dark:text-gray-400 mt-2">{profile.bio}</p>
              )}
              <div className="mt-4 flex items-center justify-center sm:justify-start gap-4">
                <div className="flex items-center gap-2">
                  <Star className="w-5 h-5 text-yellow-500" />
                  <span className="text-gray-700 dark:text-gray-300">
                    {averageRating} / 5.0
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <Users className="w-5 h-5 text-blue-500" />
                  <span className="text-gray-700 dark:text-gray-300">
                    {trips.length} Trips
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="grid md:grid-cols-2 gap-8">
        {/* Trips Section */}
        <div>
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200 mb-6">
            Trips
          </h2>
          {trips.length === 0 ? (
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 text-center">
              <p className="text-gray-500">No trips yet</p>
            </div>
          ) : (
            <div className="space-y-4">
              {trips.map((trip) => (
                <Link
                  key={trip.id}
                  to={`/trips/${trip.id}`}
                  className="block bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow"
                >
                  <div className="p-6">
                    <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
                      {trip.title}
                    </h3>
                    <div className="mt-4 space-y-2 text-sm">
                      <p className="text-gray-600 dark:text-gray-400 flex items-center gap-2">
                        <MapPin className="w-4 h-4" />
                        {trip.destination}
                      </p>
                      <p className="text-gray-600 dark:text-gray-400 flex items-center gap-2">
                        <Calendar className="w-4 h-4" />
                        {new Date(trip.startDate).toLocaleDateString()} - {new Date(trip.endDate).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                </Link>
              ))}
            </div>
          )}
        </div>

        {/* Reviews Section */}
        <div>
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200 mb-6">
            Reviews
          </h2>
          
          {/* Review Form - Only show if not own profile and haven't reviewed yet */}
          {!isOwnProfile && !userReview && (
            <form onSubmit={submitReview} className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
              <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">
                Leave a Review
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-gray-700 dark:text-gray-300 mb-2">
                    Rating
                  </label>
                  <StarRating
                    rating={newReview.rating}
                    onRatingChange={(rating) => setNewReview({ ...newReview, rating })}
                  />
                </div>
                <div>
                  <label className="block text-gray-700 dark:text-gray-300 mb-2">
                    Comment
                  </label>
                  <textarea
                    value={newReview.comment}
                    onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                    rows="4"
                    placeholder="Share your experience working with this user..."
                  ></textarea>
                </div>
                <button
                  type="submit"
                  className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Submit Review
                </button>
              </div>
            </form>
          )}

          {/* Reviews List */}
          {reviews.length === 0 ? (
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 text-center">
              <p className="text-gray-500">No reviews yet</p>
            </div>
          ) : (
            <div className="space-y-4">
              {reviews.map((review) => (
                <div
                  key={review.id}
                  className={`bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 ${
                    review.reviewer.username === currentUser?.username 
                      ? 'border-2 border-blue-500'
                      : ''
                  }`}
                >
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-4">
                      <img
                        src={review.reviewer.profilePicture || '/default-avatar.png'}
                        alt={review.reviewer.username}
                        className="w-10 h-10 rounded-full object-cover"
                      />
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200">
                          {review.reviewer.username}
                          {review.reviewer.username === currentUser?.username && (
                            <span className="ml-2 text-sm text-blue-500">(Your Review)</span>
                          )}
                        </p>
                        <StarRating rating={review.rating} readonly={true} />
                      </div>
                    </div>
                    <div className="flex items-center gap-2 text-gray-500 dark:text-gray-400">
                      <Clock className="w-4 h-4" />
                      <span className="text-sm">
                        {new Date(review.dateReviewed).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                  <p className="text-gray-600 dark:text-gray-400">{review.comment}</p>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Profile;

================
File: src/components/auth/Register.jsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import API from '../../api/api';
import Step1 from './register-steps/Step1';
import Step2 from './register-steps/Step2';
import Step3 from './register-steps/Step3';

const steps = [
  { id: 0, title: 'Account Info', component: Step1 },
  { id: 1, title: 'Personal Details', component: Step2 },
  { id: 2, title: 'Profile & Settings', component: Step3 }
];

const Register = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [isStepValid, setIsStepValid] = useState(false);
  const [formData, setFormData] = useState({
    username: '',
    loginName: '',
    password: '',
    gender: '',
    email: '',
    profilePicture: '',
    bio: ''
  });
  const [errors, setErrors] = useState({});
  const navigate = useNavigate();
  

  const onChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleValidityChange = (isValid) => {
    setIsStepValid(isValid);
  };

  const handleNext = () => {
    if (!isStepValid) return;
    setCurrentStep((prev) => prev + 1);
  };

  const handleBack = () => {
    setCurrentStep((prev) => prev - 1);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isStepValid) return;
    try {
      await API.post('/auth/register', formData);
      navigate('/login');
    } catch (err) {
      setErrors({ form: 'Registration failed. Please try again.' });
    }
  };

  const StepComponent = steps[currentStep].component;

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl p-8 max-w-lg w-full">
        <h2 className="text-3xl font-bold text-center text-blue-600 dark:text-blue-400 mb-6">Register</h2>
        {errors.form && <p className="mb-4 text-center text-red-600">{errors.form}</p>}
        <div className="mb-6 flex justify-between">
          {steps.map((step, idx) => (
            <div key={step.id} className={`flex-1 text-center ${idx === currentStep ? 'text-blue-600 dark:text-blue-400 font-bold' : 'text-gray-500'}`}>
              {step.title}
            </div>
          ))}
        </div>
        <form onSubmit={handleSubmit}>
          <StepComponent 
            formData={formData} 
            onChange={onChange} 
            onValidityChange={handleValidityChange} 
          />
          <div className="flex justify-between mt-6">
            {currentStep > 0 && (
              <button type="button" onClick={handleBack} className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400 transition">
                Back
              </button>
            )}
            {currentStep < steps.length - 1 && (
              <button 
                type="button" 
                onClick={handleNext} 
                disabled={!isStepValid} 
                className={`ml-auto px-4 py-2 rounded transition ${isStepValid ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-400 text-gray-200'}`}
              >
                Next
              </button>
            )}
            {currentStep === steps.length - 1 && (
              <button 
                type="submit" 
                disabled={!isStepValid} 
                className={`ml-auto px-4 py-2 rounded transition ${isStepValid ? 'bg-green-600 text-white hover:bg-green-700' : 'bg-gray-400 text-gray-200'}`}
              >
                Register
              </button>
            )}
          </div>
        </form>
      </div>
    </div>
  );
};

export default Register;

================
File: src/components/chat/layouts/ChatLayout.jsx
================
import React from 'react';
import { Menu } from 'lucide-react';

export const ChatLayout = ({
  title,
  showSidebar = true,
  onToggleSidebar,
  sidebarContent,
  children,
}) => {
  return (
    <div className="flex h-full min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="flex-1 flex flex-col">
        <div className="bg-white dark:bg-gray-800 shadow-sm border-b dark:border-gray-700 p-4 flex items-center justify-between">
          <h2 className="text-xl font-semibold">{title}</h2>
          {showSidebar && (
            <button
              onClick={onToggleSidebar}
              className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg lg:hidden"
            >
              <Menu className="w-6 h-6" />
            </button>
          )}
        </div>
        {children}
      </div>
      {showSidebar && (
        <div className="hidden lg:block w-80 border-l dark:border-gray-700 bg-white dark:bg-gray-800">
          {sidebarContent}
        </div>
      )}
    </div>
  );
};

export default ChatLayout;

================
File: src/components/chat/layouts/MessageList.jsx
================
import React, { useEffect, useRef, useState } from 'react';
import { Message } from '../ChatComponents';

export const MessageList = ({ messages, currentUser, onReact, loadMore, hasMore }) => {
  const observerRef = useRef(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      async (entries) => {
        if (entries[0].isIntersecting && hasMore && !loading) {
          setLoading(true);
          await loadMore();
          setLoading(false);
        }
      },
      { threshold: 0.5 }
    );

    if (observerRef.current) {
      observer.observe(observerRef.current);
    }

    return () => observer.disconnect();
  }, [hasMore, loading, loadMore]);

  return (
    <div className="flex-1 overflow-y-auto p-4">
      {loading && (
        <div className="text-center py-4">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
        </div>
      )}
      {hasMore && <div ref={observerRef} className="h-4" />}
      <div className="flex flex-col-reverse">
        {messages.map((message) => (
          <Message
            key={message.id}
            message={message}
            currentUser={currentUser}
            onReact={onReact}
          />
        ))}
      </div>
    </div>
  );
};

================
File: src/components/chat/ChatComponents.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useStompClient } from '../../hooks/useStompClient';
import { useAuth } from '../../hooks/useAuth';
import { useChatContext } from '../contexts/ChatContext';
import API from '../../api/api';
import { PollMessage } from '../voting/Voting';
import { 
  Send, 
  Image, 
  Smile, 
  Users,
  FileText,
  MenuIcon,
  X,
  ChevronRight,
  ChevronLeft,
  Heart,
  MessageCircle
} from 'lucide-react';
import data from '@emoji-mart/data';
import Picker from '@emoji-mart/react';
import toast from 'react-hot-toast';

// Message Types
const MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  FILE: 'FILE',
  POLL: 'POLL'
};

// Available Reactions
const REACTIONS = {
  LIKE: '👍',
  LOVE: '❤️',
  LAUGH: '😂',
  SURPRISED: '😮',
  SAD: '😢',
  ANGRY: '😠'
};

// Reusable Message Component
const Message = ({ message, currentUser, onReact, showReactions = true }) => {
  const [showReactionPicker, setShowReactionPicker] = useState(false);
  const isOwnMessage = message.sender === currentUser?.username;

  const handleReaction = (reaction) => {
    onReact(message.id, reaction);
    setShowReactionPicker(false);
  };

  const renderContent = () => {
    switch (message.type) {
      case MessageType.IMAGE:
        return (
          <img
            src={message.fileUrl}
            alt="Shared image"
            className="max-w-sm max-h-64 rounded-lg object-contain"
          />
        );
      case MessageType.FILE:
        return (
          <a
            href={message.fileUrl}
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center gap-2 p-2 bg-gray-100 dark:bg-gray-700 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
          >
            <FileText className="w-5 h-5" />
            <span>{message.fileName}</span>
          </a>
        );
      case MessageType.POLL:
        return (
          <PollMessage
            poll={message.poll}
            onVote={message.onVote}
            currentUser={currentUser}
            onFinalize={message.onFinalize}
            isOrganizer={message.sender === currentUser?.username}
            onEdit={message.onEdit}
          />
        );
      default:
        return <p className="whitespace-pre-wrap break-words">{message.content}</p>;
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'} mb-4`}
    >
      <div className="flex items-end gap-2">
        {!isOwnMessage && (
          <img
            src={message.senderProfilePic || '/default-avatar.png'}
            alt={message.sender}
            className="w-8 h-8 rounded-full"
          />
        )}
        <div className={`flex flex-col ${isOwnMessage ? 'items-end' : 'items-start'}`}>
          {!isOwnMessage && (
            <span className="text-sm text-gray-600 dark:text-gray-400 ml-2 mb-1">
              {message.sender}
            </span>
          )}
          <div
            className={`relative group max-w-md ${
              isOwnMessage
                ? 'bg-blue-600 text-white rounded-l-lg rounded-tr-lg'
                : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-r-lg rounded-tl-lg'
            } p-3 shadow-sm`}
            onDoubleClick={() => showReactions && setShowReactionPicker(true)}
          >
            {renderContent()}
            <div className="text-xs mt-1 opacity-75">
              {new Date(message.timestamp).toLocaleTimeString()}
            </div>

            {showReactions && (
              <>
                {/* Reaction Picker */}
                <AnimatePresence>
                  {showReactionPicker && (
                    <motion.div
                      initial={{ opacity: 0, scale: 0.95 }}
                      animate={{ opacity: 1, scale: 1 }}
                      exit={{ opacity: 0, scale: 0.95 }}
                      className={`absolute ${
                        isOwnMessage ? 'right-full mr-2' : 'left-full ml-2'
                      } top-1/2 -translate-y-1/2 bg-white dark:bg-gray-800 rounded-full shadow-lg p-1 flex items-center gap-1 z-10`}
                    >
                      {Object.entries(REACTIONS).map(([key, emoji]) => (
                        <button
                          key={key}
                          onClick={() => handleReaction(key)}
                          className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full transition-colors"
                        >
                          {emoji}
                        </button>
                      ))}
                    </motion.div>
                  )}
                </AnimatePresence>

                {/* Display Reactions */}
                {message.reactions?.length > 0 && (
                  <div className="absolute -bottom-6 left-0 bg-white dark:bg-gray-800 rounded-full shadow-md px-2 py-1 flex items-center gap-1">
                    {Object.entries(
                      message.reactions.reduce((acc, reaction) => {
                        acc[reaction.type] = (acc[reaction.type] || 0) + 1;
                        return acc;
                      }, {})
                    ).map(([type, count]) => (
                      <span key={type} className="flex items-center gap-1">
                        {REACTIONS[type]} {count}
                      </span>
                    ))}
                  </div>
                )}
              </>
            )}
          </div>
        </div>
      </div>
    </motion.div>
  );
};

// Chat Input Component
const ChatInput = ({ onSend, onFileSelect }) => {
  const [message, setMessage] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const fileInputRef = useRef(null);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!message.trim()) return;
    onSend(message);
    setMessage('');
    setShowEmojiPicker(false);
  };

  const handleFileChange = async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await API.post('/chat/upload', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });

      onFileSelect(response.data);
    } catch (error) {
      console.error('File upload error:', error);
      toast.error('Failed to upload file');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 border-t dark:border-gray-700">
      <div className="flex items-center gap-2">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          className="hidden"
          accept="image/*,application/*"
        />
        <button
          type="button"
          onClick={() => fileInputRef.current?.click()}
          className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"
        >
          <Image className="w-5 h-5" />
        </button>
        <button
          type="button"
          onClick={() => setShowEmojiPicker(!showEmojiPicker)}
          className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"
        >
          <Smile className="w-5 h-5" />
        </button>
        <div className="relative flex-1">
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Type a message..."
            className="w-full px-4 py-2 rounded-full border focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
          {showEmojiPicker && (
            <div className="absolute bottom-full right-0 mb-2">
              <Picker
                data={data}
                onEmojiSelect={(emoji) => {
                  setMessage((prev) => prev + emoji.native);
                  setShowEmojiPicker(false);
                }}
              />
            </div>
          )}
        </div>
        <button
          type="submit"
          className="p-2 text-blue-500 hover:text-blue-600"
        >
          <Send className="w-5 h-5" />
        </button>
      </div>
    </form>
  );
};

// Message List Component with Infinite Scroll
const MessageList = ({ messages, currentUser, onReact, loadMore, hasMore }) => {
  const observerRef = useRef(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      async (entries) => {
        if (entries[0].isIntersecting && hasMore && !loading) {
          setLoading(true);
          await loadMore();
          setLoading(false);
        }
      },
      { threshold: 0.5 }
    );

    if (observerRef.current) {
      observer.observe(observerRef.current);
    }

    return () => observer.disconnect();
  }, [hasMore, loading, loadMore]);

  return (
    <div className="flex-1 overflow-y-auto p-4">
      {loading && (
        <div className="text-center py-4">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
        </div>
      )}
      {hasMore && <div ref={observerRef} className="h-4" />}
      {messages.map((message) => (
        <Message
          key={message.id}
          message={message}
          currentUser={currentUser}
          onReact={onReact}
        />
      ))}
    </div>
  );
};

// Base Chat Layout Component
const ChatLayout = ({
  title,
  showSidebar = true,
  onToggleSidebar,
  sidebarContent,
  children,
}) => {
  return (
    <div className="flex h-full min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="flex-1 flex flex-col">
        <div className="bg-white dark:bg-gray-800 shadow-sm border-b dark:border-gray-700 p-4 flex items-center justify-between">
          <h2 className="text-xl font-semibold">{title}</h2>
          {showSidebar && (
            <button
              onClick={onToggleSidebar}
              className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg lg:hidden"
            >
              <MenuIcon className="w-6 h-6" />
            </button>
          )}
        </div>
        {children}
      </div>
      {showSidebar && (
        <div className="hidden lg:block w-80 border-l dark:border-gray-700 bg-white dark:bg-gray-800">
          {sidebarContent}
        </div>
      )}
    </div>
  );
};

// Hook for managing chat messages with pagination
const useChatMessages = (initialMessages = [], fetchMore) => {
  const [messages, setMessages] = useState(initialMessages);
  const [hasMore, setHasMore] = useState(true);
  const [oldestMessageId, setOldestMessageId] = useState(null);

  const loadMore = async () => {
    if (!hasMore) return;

    try {
      const olderMessages = await fetchMore(oldestMessageId);
      if (olderMessages.length === 0) {
        setHasMore(false);
      } else {
        setMessages((prev) => [...prev, ...olderMessages]);
        setOldestMessageId(olderMessages[olderMessages.length - 1].id);
      }
    } catch (error) {
      console.error('Error loading more messages:', error);
      toast.error('Failed to load more messages');
    }
  };

  const addMessage = (newMessage) => {
    setMessages((prev) => [newMessage, ...prev]);
  };

  const updateMessage = (messageId, updates) => {
    setMessages((prev) =>
      prev.map((msg) =>
        msg.id === messageId ? { ...msg, ...updates } : msg
      )
    );
  };

  return { messages, hasMore, loadMore, addMessage, updateMessage };
};

export {
  Message,
  ChatInput,
  MessageList,
  ChatLayout,
  useChatMessages,
  MessageType,
  REACTIONS
};

================
File: src/components/chat/ChatPollComponents.jsx
================
import React, { useState, useRef } from 'react';
import { Message, MessageType } from './ChatComponents';
import { PollMessage, CreatePollForm } from '../voting/Voting';
import data from '@emoji-mart/data';
import Picker from '@emoji-mart/react';
import { Image, Send, Vote, X } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import toast from 'react-hot-toast';

// Poll Button Component for Chat
const PollButton = ({ onCreatePoll }) => {
  const [showPollForm, setShowPollForm] = useState(false);

  const handleCreatePoll = async (pollData) => {
    try {
      await onCreatePoll(pollData);
      setShowPollForm(false);
    } catch (error) {
      console.error('Error creating poll:', error);
      toast.error('Failed to create poll');
    }
  };

  return (
    <>
      <button
        onClick={() => setShowPollForm(true)}
        className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
        title="Create Poll"
      >
        <Vote className="w-5 h-5" />
      </button>

      {/* Poll Creation Modal */}
      <AnimatePresence>
        {showPollForm && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 max-w-lg w-full"
            >
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
                  Create New Poll
                </h3>
                <button
                  onClick={() => setShowPollForm(false)}
                  className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
              
              <CreatePollForm
                onSubmit={handleCreatePoll}
                onCancel={() => setShowPollForm(false)}
              />
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

// Extended ChatInput Component with Poll Support
const ChatInputWithPolls = ({ onSend, onFileSelect, onCreatePoll }) => {
  const [message, setMessage] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const fileInputRef = useRef(null);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!message.trim()) return;
    onSend(message);
    setMessage('');
    setShowEmojiPicker(false);
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 border-t dark:border-gray-700">
      <div className="flex items-center gap-2">
        <input
          type="file"
          ref={fileInputRef}
          onChange={(e) => onFileSelect(e.target.files[0])}
          className="hidden"
          accept="image/*,application/*"
        />
        <button
          type="button"
          onClick={() => fileInputRef.current?.click()}
          className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
        >
          <Image className="w-5 h-5" />
        </button>
        <PollButton onCreatePoll={onCreatePoll} />
        <div className="relative flex-1">
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Type a message..."
            className="w-full px-4 py-2 rounded-full border focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
          {showEmojiPicker && (
            <div className="absolute bottom-full right-0 mb-2">
              <Picker
                data={data}
                onEmojiSelect={(emoji) => {
                  setMessage((prev) => prev + emoji.native);
                  setShowEmojiPicker(false);
                }}
              />
            </div>
          )}
        </div>
        <button
          type="submit"
          className="p-2 text-blue-500 hover:text-blue-600"
        >
          <Send className="w-5 h-5" />
        </button>
      </div>
    </form>
  );
};

// Extended Message Component with Poll Support
const MessageWithPolls = ({ message, currentUser, onReact, onVote, onFinalizePoll, isOrganizer }) => {
  if (message.type === MessageType.POLL) {
    return (
      <div className="flex justify-center my-4">
        <PollMessage
          poll={message.poll}
          onVote={onVote}
          currentUser={currentUser}
          onFinalize={onFinalizePoll}
          isOrganizer={isOrganizer}
        />
      </div>
    );
  }

  return (
    <Message
      message={message}
      currentUser={currentUser}
      onReact={onReact}
    />
  );
};

export { ChatInputWithPolls, MessageWithPolls };

================
File: src/components/chat/GroupChat.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { useStompClient } from '../../hooks/useStompClient';
import { useAuth } from '../../hooks/useAuth';
import API from '../../api/api';
import { Message, ChatInput, MessageType } from './ChatComponents';
import OnlineUsers from './OnlineUsers';
import { Menu } from 'lucide-react';
import toast from 'react-hot-toast';

// Internal helper hooks and components...
const MessageList = ({ messages, currentUser, onReact, loadMore, hasMore }) => {
  const observerRef = useRef(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      async (entries) => {
        if (entries[0].isIntersecting && hasMore && !loading) {
          setLoading(true);
          await loadMore();
          setLoading(false);
        }
      },
      { threshold: 0.5 }
    );

    if (observerRef.current) {
      observer.observe(observerRef.current);
    }

    return () => observer.disconnect();
  }, [hasMore, loading, loadMore]);

  return (
    <div className="flex-1 overflow-y-auto p-4">
      {loading && (
        <div className="text-center py-4">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
        </div>
      )}
      {hasMore && <div ref={observerRef} className="h-4" />}
      <div className="flex flex-col-reverse">
        {messages.map((message) => (
          <Message
            key={message.id}
            message={message}
            currentUser={currentUser}
            onReact={onReact}
          />
        ))}
      </div>
    </div>
  );
};

const GroupChat = ({ tripId }) => {
  const [showSidebar, setShowSidebar] = useState(false);
  const [onlineUsers, setOnlineUsers] = useState([]);
  const { client, connected } = useStompClient();
  const { user } = useAuth();
  const [messages, setMessages] = useState([]);
  const [hasMore, setHasMore] = useState(true);
  const [oldestMessageId, setOldestMessageId] = useState(null);

  useEffect(() => {
    if (!client || !connected) return;

    // Subscribe to trip messages
    const messageSubscription = client.subscribe(
      `/topic/trip/${tripId}`,
      (message) => {
        const receivedMessage = JSON.parse(message.body);
        setMessages(prev => [receivedMessage, ...prev]);
      }
    );

    // Subscribe to presence updates
    const presenceSubscription = client.subscribe(
      '/topic/presence',
      (message) => {
        const presenceUpdate = JSON.parse(message.body);
        if (Array.isArray(presenceUpdate)) {
          setOnlineUsers(presenceUpdate);
        } else {
          setOnlineUsers((prev) => {
            if (presenceUpdate.status === 'ONLINE') {
              if (!prev.find(u => u.username === presenceUpdate.username)) {
                return [...prev, presenceUpdate];
              }
            } else {
              return prev.filter(u => u.username !== presenceUpdate.username);
            }
            return prev;
          });
        }
      }
    );

    // Get initial online users
    client.publish({
      destination: '/app/presence.getOnlineUsers'
    });

    // Load initial messages
    loadMessages();

    return () => {
      messageSubscription.unsubscribe();
      presenceSubscription.unsubscribe();
    };
  }, [client, connected, tripId]);

  const loadMessages = async (beforeId) => {
    try {
      const response = await API.get(`/chat/messages/trip/${tripId}`, {
        params: { before: beforeId, limit: 20 }
      });
      
      if (response.data.length === 0) {
        setHasMore(false);
      } else {
        setMessages(prev => [...prev, ...response.data]);
        setOldestMessageId(response.data[response.data.length - 1].id);
      }
    } catch (error) {
      console.error('Error loading messages:', error);
      toast.error('Failed to load messages');
    }
  };

  const handleSendMessage = (content) => {
    if (!client || !connected) {
      toast.error('Not connected to chat server');
      return;
    }

    try {
      client.publish({
        destination: `/app/chat.trip.${tripId}`,
        body: JSON.stringify({
          content,
          type: MessageType.TEXT,
          timestamp: new Date().toISOString()
        })
      });
    } catch (error) {
      console.error('Error sending message:', error);
      toast.error('Failed to send message');
    }
  };

  const handleFileSelect = async (fileData) => {
    if (!client || !connected) {
      toast.error('Not connected to chat server');
      return;
    }

    try {
      client.publish({
        destination: `/app/chat.trip.${tripId}`,
        body: JSON.stringify({
          content: fileData.fileUrl,
          fileName: fileData.fileName,
          type: fileData.contentType.startsWith('image/')
            ? MessageType.IMAGE
            : MessageType.FILE,
          timestamp: new Date().toISOString()
        })
      });
    } catch (error) {
      console.error('Error sending file:', error);
      toast.error('Failed to send file');
    }
  };

  const handleReaction = async (messageId, reactionType) => {
    try {
      const response = await API.post(`/api/chat/messages/${messageId}/reactions`, {
        reactionType
      });
      setMessages(prev =>
        prev.map(msg =>
          msg.id === messageId ? { ...msg, ...response.data } : msg
        )
      );
    } catch (error) {
      console.error('Error adding reaction:', error);
      toast.error('Failed to add reaction');
    }
  };

  return (
    <div className="flex h-full min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="flex-1 flex flex-col">
        <div className="bg-white dark:bg-gray-800 shadow-sm border-b dark:border-gray-700 p-4 flex items-center justify-between">
          <h2 className="text-xl font-semibold">Group Chat</h2>
          <button
            onClick={() => setShowSidebar(!showSidebar)}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg lg:hidden"
          >
            <Menu className="w-6 h-6" />
          </button>
        </div>

        <div className="flex-1 flex flex-col">
          <MessageList
            messages={messages}
            currentUser={user}
            onReact={handleReaction}
            loadMore={() => loadMessages(oldestMessageId)}
            hasMore={hasMore}
          />
          <ChatInput
            onSend={handleSendMessage}
            onFileSelect={handleFileSelect}
          />
        </div>
      </div>

      {/* Online Users Sidebar - Desktop & Mobile */}
      <OnlineUsers
        isOpen={showSidebar || window.innerWidth >= 1024}
        onClose={() => setShowSidebar(false)}
        users={onlineUsers}
        className="lg:h-[calc(100vh-4rem)] lg:pt-16"
      />
    </div>
  );
};

export default GroupChat;

================
File: src/components/chat/OnlineUsers.jsx
================
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  MessageCircle, 
  UserPlus, 
  X, 
  Clock,
  CheckCircle,
  Search 
} from 'lucide-react';
import { useAuth } from '../../hooks/useAuth';
import { useStompClient } from '../../hooks/useStompClient';
import API from '../../api/api';
import toast from 'react-hot-toast';

const OnlineUsers = ({ isOpen, onClose, onUserChat, className = "" }) => {
  const [users, setUsers] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [friendStatuses, setFriendStatuses] = useState({});
  const { user: currentUser } = useAuth();
  const { client, connected } = useStompClient();

  useEffect(() => {
    if (!client || !connected) return;

    const subscription = client.subscribe('/topic/presence', (message) => {
      const presenceData = JSON.parse(message.body);
      if (Array.isArray(presenceData)) {
        const otherUsers = presenceData.filter(u => u.id !== currentUser?.id);
        setUsers(otherUsers);
      }
    });

    client.publish({
      destination: '/app/presence.getOnlineUsers'
    });

    return () => subscription.unsubscribe();
  }, [client, connected, currentUser?.id]);

  useEffect(() => {
    setFilteredUsers(
      users.filter(user => 
        user.username.toLowerCase().includes(searchQuery.toLowerCase())
      )
    );
  }, [users, searchQuery]);

  useEffect(() => {
    const loadFriendStatuses = async () => {
      const statuses = {};
      for (const user of users) {
        try {
          const response = await API.get(`/friends/status/${user.username}`);
          statuses[user.id] = response.data;
        } catch (err) {
          console.error(`Error loading friend status for ${user.username}:`, err);
        }
      }
      setFriendStatuses(statuses);
    };

    if (users.length > 0) {
      loadFriendStatuses();
    }
  }, [users]);

  const handleSendFriendRequest = async (userId) => {
    try {
      await API.post(`/friends/${currentUser.id}/request/${userId}`);
      setFriendStatuses(prev => ({
        ...prev,
        [userId]: { ...prev[userId], hasPendingRequest: true }
      }));
      toast.success('Friend request sent!', {
        icon: '👋',
        duration: 2000
      });
    } catch (err) {
      console.error('Error sending friend request:', err);
      toast.error('Failed to send friend request');
    }
  };

  const UserCard = ({ user }) => {
    const friendStatus = friendStatuses[user.id] || {};
    const [isHovered, setIsHovered] = useState(false);

    return (
      <motion.div
        layout
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        whileHover={{ scale: 1.02 }}
        className="bg-white dark:bg-gray-700 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-300"
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <div className="flex items-center gap-4">
          <motion.div 
            className="relative"
            whileHover={{ scale: 1.1 }}
          >
            <img
              src={user.profilePicture || "/default-avatar.png"}
              alt={user.username}
              className="w-12 h-12 rounded-full object-cover ring-2 ring-offset-2 ring-blue-500"
            />
            <motion.div 
              initial={{ scale: 0.8 }}
              animate={{ scale: 1 }}
              className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white dark:border-gray-800 rounded-full"
            />
          </motion.div>

          <div className="flex-1 min-w-0">
            <motion.p 
              className="font-semibold text-gray-900 dark:text-gray-100 truncate"
              initial={{ opacity: 0.8 }}
              animate={{ opacity: 1 }}
            >
              {user.username}
            </motion.p>
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
              className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400"
            >
              <span className="inline-block w-2 h-2 rounded-full bg-green-500"></span>
              Online now
            </motion.div>
          </div>

          <AnimatePresence>
            {isHovered && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                className="flex items-center gap-1"
              >
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => onUserChat(user)}
                  className="p-2 text-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-full transition-colors"
                >
                  <MessageCircle className="w-5 h-5" />
                </motion.button>

                {!friendStatus.status && !friendStatus.hasPendingRequest && (
                  <motion.button
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => handleSendFriendRequest(user.id)}
                    className="p-2 text-green-500 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-full transition-colors"
                  >
                    <UserPlus className="w-5 h-5" />
                  </motion.button>
                )}

                {friendStatus.hasPendingRequest && (
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    className="p-2 text-yellow-500"
                    title="Friend request pending"
                  >
                    <Clock className="w-5 h-5" />
                  </motion.div>
                )}

                {friendStatus.status && (
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    className="p-2 text-green-500"
                    title="Friend"
                  >
                    <CheckCircle className="w-5 h-5" />
                  </motion.div>
                )}
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </motion.div>
    );
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Mobile backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1, }}
            exit={{ opacity: 0 }}
            className="lg:hidden fixed inset-0 bg-black/50"
            style={{ zIndex: 1001 }}
            onClick={onClose}
          />

          {/* Sidebar Container */}
          <motion.div
            initial={{ x: '100%' }}
            animate={{ x: 0 }}
            exit={{ x: '100%' }}
            transition={{ type: 'spring', damping: 20 }}
            className={`fixed lg:relative inset-y-0 right-0 w-80 bg-gray-50 dark:bg-gray-800 shadow-lg 
              flex flex-col ${className}`}
            style={{ zIndex: 999, top: window.innerWidth >= 1024 ? undefined : 0 }}
          >
            {/* Header */}
            <motion.div 
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              className="top-0 bg-gray-50 dark:bg-gray-800 p-4 border-b dark:border-gray-700"
            >
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-bold text-gray-800 dark:text-gray-200">
                  Online Users
                </h3>
                <button
                  onClick={onClose}
                  className="lg:hidden p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Search users..."
                  className="w-full pl-10 pr-4 py-2 bg-white dark:bg-gray-700 border border-gray-200 
                    dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 
                    transition-all"
                />
              </div>
            </motion.div>

            {/* User List */}
            <motion.div className="flex-1 overflow-y-auto p-4">
              <div className="space-y-3">
                <AnimatePresence mode="popLayout">
                  {filteredUsers.length > 0 ? (
                    filteredUsers.map(user => (
                      <UserCard key={user.id} user={user} />
                    ))
                  ) : (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      className="text-center py-8"
                    >
                      <p className="text-gray-500 dark:text-gray-400">
                        {searchQuery ? 'No users match your search' : 'No users online'}
                      </p>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </motion.div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
};

export default OnlineUsers;

================
File: src/components/chat/PrivateChat.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { Transition } from '@headlessui/react';
import { useStompClient } from '../../hooks/useStompClient';
import { useAuth } from '../../hooks/useAuth';

const PrivateChat = ({ recipientId }) => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const { client, connected } = useStompClient('http://localhost:8080/ws');
  const messagesEndRef = useRef(null);
  const { user } = useAuth();

  useEffect(() => {
    if (!client || !connected || !user) return;

    console.log('Subscribing to private messages');
    const subscription = client.subscribe(`/user/queue/private`, (message) => {
      try {
        const receivedMessage = JSON.parse(message.body);
        setMessages(prev => [...prev, receivedMessage]);
      } catch (err) {
        console.error('Error parsing message:', err);
      }
    });

    return () => {
      if (subscription) {
        subscription.unsubscribe();
      }
    };
  }, [client, connected, user]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const sendMessage = () => {
    if (!input.trim() || !client || !connected) return;

    const message = {
      content: input,
      recipientId: recipientId,
      sender: user?.username || 'Anonymous',
      type: 'PRIVATE',
      timestamp: new Date().toISOString()
    };

    client.publish({
      destination: '/app/private.sendMessage',
      body: JSON.stringify(message)
    });
    
    // Add sent message to local state immediately
    setMessages(prev => [...prev, message]);
    setInput('');
  };

  return (
    <div className="pt-20 pb-8 px-4 bg-gray-50 dark:bg-gray-900 min-h-screen flex flex-col">
      <h2 className="text-3xl font-bold text-center mb-6 text-gray-800 dark:text-gray-200">Private Chat</h2>
      <div className="flex-1 bg-white dark:bg-gray-700 rounded-lg shadow overflow-y-auto p-4 mb-4">
        {messages.map((msg, idx) => (
          <Transition
            key={idx}
            appear={true}
            show={true}
            enter="transition-opacity duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
          >
            <div className={`mb-3 ${msg.sender === user?.username ? 'text-right' : ''}`}>
              <div className={`inline-block rounded-lg px-4 py-2 ${
                msg.sender === user?.username 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-100 dark:bg-gray-600'
              }`}>
                <span className="font-semibold block text-sm">{msg.sender}</span>
                <span className="block">{msg.content}</span>
                <span className="text-xs opacity-75 mt-1">
                  {new Date(msg.timestamp).toLocaleTimeString()}
                </span>
              </div>
            </div>
          </Transition>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <div className="flex">
        <input
          type="text"
          placeholder="Type a message..."
          className="flex-1 px-4 py-2 border rounded-l focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
          disabled={!connected}
        />
        <button
          onClick={sendMessage}
          disabled={!connected}
          className={`px-4 py-2 rounded-r transition ${
            connected 
              ? 'bg-blue-600 text-white hover:bg-blue-700' 
              : 'bg-gray-400 cursor-not-allowed'
          }`}
        >
          Send
        </button>
      </div>
    </div>
  );
};

export default PrivateChat;

================
File: src/components/chat/PrivateChatPopup.jsx
================
import React, { useState, useEffect } from 'react';
import { useStompClient } from '../../hooks/useStompClient';
import { useAuth } from '../../hooks/useAuth';
import API from '../../api/api';
import { useChatMessages } from '../../hooks/useChatMessages';
import { MessageList } from './layouts/MessageList';
import {
  Message,
  ChatInput,
  MessageType,
} from './ChatComponents';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronDown, X } from 'lucide-react';
import toast from 'react-hot-toast';

const PrivateChatPopup = ({ recipient, onClose, position }) => {
  const [minimized, setMinimized] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0);
  const { client, connected } = useStompClient();
  const { user } = useAuth();

  // Initialize chat messages with pagination
  const {
    messages,
    hasMore,
    loadMore,
    addMessage,
    updateMessage
  } = useChatMessages([], async (beforeId) => {
    const response = await API.get(`/chat/messages/private/${recipient.id}`, {
      params: { before: beforeId, limit: 20 }
    });
    return response.data;
  });

  useEffect(() => {
    if (!client || !connected) return;

    const subscription = client.subscribe(
      `/user/queue/private`,
      (message) => {
        const receivedMessage = JSON.parse(message.body);
        
        // Only handle messages from this recipient
        if (receivedMessage.sender === recipient.username ||
            receivedMessage.recipient === recipient.username) {
          addMessage(receivedMessage);
          
          // Increment unread count if minimized
          if (minimized && receivedMessage.sender === recipient.username) {
            setUnreadCount(prev => prev + 1);
            
            // Show browser notification
            if (Notification.permission === 'granted' && document.hidden) {
              new Notification(`Message from ${receivedMessage.sender}`, {
                body: receivedMessage.content,
                icon: recipient.profilePicture || '/default-avatar.png'
              });
            }
          }
        }
      }
    );

    return () => subscription.unsubscribe();
  }, [client, connected, recipient.username, minimized]);

  // Request notification permission
  useEffect(() => {
    if (Notification.permission === 'default') {
      Notification.requestPermission();
    }
  }, []);

  // Reset unread count when maximizing
  useEffect(() => {
    if (!minimized) {
      setUnreadCount(0);
    }
  }, [minimized]);

  const handleSendMessage = (content) => {
    if (!client || !connected) {
      toast.error('Not connected to chat server');
      return;
    }

    try {
      client.publish({
        destination: '/app/chat.private',
        body: JSON.stringify({
          content,
          recipient: recipient.id,
          type: MessageType.TEXT,
          timestamp: new Date().toISOString()
        })
      });
    } catch (error) {
      console.error('Error sending message:', error);
      toast.error('Failed to send message');
    }
  };

  const handleFileSelect = async (fileData) => {
    if (!client || !connected) {
      toast.error('Not connected to chat server');
      return;
    }

    try {
      client.publish({
        destination: '/app/chat.private',
        body: JSON.stringify({
          content: fileData.fileUrl,
          fileName: fileData.fileName,
          recipient: recipient.username,
          type: fileData.contentType.startsWith('image/')
            ? MessageType.IMAGE
            : MessageType.FILE,
          timestamp: new Date().toISOString()
        })
      });
    } catch (error) {
      console.error('Error sending file:', error);
      toast.error('Failed to send file');
    }
  };

  const handleReaction = async (messageId, reactionType) => {
    try {
      const response = await API.post(`/chat/messages/${messageId}/reactions`, {
        reactionType
      });
      updateMessage(messageId, response.data);
    } catch (error) {
      console.error('Error adding reaction:', error);
      toast.error('Failed to add reaction');
    }
  };

  return (
    <div 
      className={`fixed bottom-0 z-50 transition-all duration-300 ease-in-out
        ${minimized ? 'h-12' : 'h-96'}
        ${position === 0 ? 'right-4' : `right-${80 + (position * 320)}px`}
        w-80 sm:w-96 bg-white dark:bg-gray-800 rounded-t-lg shadow-lg flex flex-col`}
    >
      {/* Chat Header */}
      <div 
        className="flex items-center justify-between p-3 bg-blue-600 text-white rounded-t-lg cursor-pointer"
        onClick={() => setMinimized(!minimized)}
      >
        <div className="flex items-center gap-2">
          <div className="relative">
            <img
              src={recipient.profilePicture || "/default-avatar.png"}
              alt={recipient.username}
              className="w-8 h-8 rounded-full"
            />
            <div className="absolute bottom-0 right-0 w-2 h-2 bg-green-500 border-2 border-white rounded-full"></div>
          </div>
          <div className="flex items-center gap-2">
            <span className="font-medium">{recipient.username}</span>
            {unreadCount > 0 && (
              <span className="px-2 py-1 text-xs bg-red-500 rounded-full">
                {unreadCount}
              </span>
            )}
          </div>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={(e) => {
              e.stopPropagation();
              setMinimized(!minimized);
            }}
            className="p-1 hover:bg-white/10 rounded-full transition-colors"
          >
            <ChevronDown 
              className={`w-4 h-4 transform transition-transform ${
                minimized ? 'rotate-180' : ''
              }`}
            />
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              onClose();
            }}
            className="p-1 hover:bg-white/10 rounded-full transition-colors"
          >
            <X className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Chat Content */}
      <AnimatePresence>
        {!minimized && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="flex-1 flex flex-col"
          >
            <MessageList
              messages={messages}
              currentUser={user}
              onReact={handleReaction}
              loadMore={loadMore}
              hasMore={hasMore}
            />
            <ChatInput
              onSend={handleSendMessage}
              onFileSelect={handleFileSelect}
            />
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default PrivateChatPopup;

================
File: src/components/common/ErrorBoundary.jsx
================
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  
  static getDerivedStateFromError(error) {
    return { hasError: true };
  }
  
  componentDidCatch(error, errorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }
  
  render() {
    if (this.state.hasError) {
      return (
        <div className="flex items-center justify-center h-screen">
          <h1 className="text-4xl font-bold">Something went wrong.</h1>
        </div>
      );
    }
    return this.props.children;
  }
}

export default ErrorBoundary;

================
File: src/components/common/LoadingSpinner.jsx
================
import React from 'react';

const LoadingSpinner = () => (
  <div className="flex items-center justify-center h-full">
    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600"></div>
  </div>
);

export default LoadingSpinner;

================
File: src/components/common/ProtectedRoute.jsx
================
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';

const ProtectedRoute = ({ children }) => {
  const { loading, isAuthenticated, initialized } = useAuth();
  const location = useLocation();

  // Don't render anything until auth is initialized
  if (!initialized || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!isAuthenticated()) {
    // Save the attempted URL
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return children;
};

export default ProtectedRoute;

================
File: src/components/contexts/ChatContext.jsx
================
import React, { createContext, useState, useContext, useEffect } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { useStompClient } from '../../hooks/useStompClient';
import PrivateChatPopup from '../chat/PrivateChatPopup';

const ChatContext = createContext(null);

export const useChatContext = () => {
  const context = useContext(ChatContext);
  if (!context) {
    throw new Error('useChatContext must be used within a ChatProvider');
  }
  return context;
};

export const ChatProvider = ({ children }) => {
  const [activeChats, setActiveChats] = useState([]);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const { user } = useAuth();
  const { client, connected } = useStompClient();

  // Handle incoming private messages
  useEffect(() => {
    if (!client || !connected || !user) return;

    const subscription = client.subscribe(
      `/user/queue/private`,
      (message) => {
        try {
          const receivedMessage = JSON.parse(message.body);
          const otherUser = receivedMessage.sender === user.username ? 
            receivedMessage.recipient : receivedMessage.sender;

          // Auto-open chat window if not already open
          if (!activeChats.some(chat => chat.username === otherUser)) {
            const newUser = {
              username: otherUser,
              status: 'ONLINE'
            };
            setActiveChats(prev => [...prev, newUser]);
          }
        } catch (error) {
          console.error('Error parsing message:', error);
        }
      }
    );

    return () => {
      if (subscription) {
        subscription.unsubscribe();
      }
    };
  }, [client, connected, user, activeChats]);

  const handleStartChat = (recipient) => {
    if (!activeChats.some(chat => chat.username === recipient.username)) {
      // Limit number of active chats on mobile
      if (window.innerWidth < 768 && activeChats.length >= 2) {
        const newChats = [...activeChats];
        newChats.shift(); // Remove oldest chat
        setActiveChats([...newChats, recipient]);
      } else {
        setActiveChats(prev => [...prev, recipient]);
      }
    }
    setIsSidebarOpen(false);
  };

  const handleCloseChat = (username) => {
    setActiveChats(prev => prev.filter(chat => chat.username !== username));
  };

  return (
    <ChatContext.Provider value={{ 
      activeChats, 
      handleStartChat, 
      isSidebarOpen, 
      setIsSidebarOpen 
    }}>
      {children}
      <div className="fixed bottom-4 right-4 z-40 flex flex-row-reverse gap-4 flex-wrap sm:flex-nowrap">
        {activeChats.map((chat, index) => (
          <PrivateChatPopup
            key={chat.username}
            recipient={chat}
            onClose={() => handleCloseChat(chat.username)}
            position={index}
          />
        ))}
      </div>
    </ChatContext.Provider>
  );
};

export default ChatContext;

================
File: src/components/dashboard/Dashboard.jsx
================
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import API from '../../api/api';
import TripCard from './TripCard';
import { PlusCircle, Search, MapPin, Loader } from 'lucide-react';

const Dashboard = () => {
  const [trips, setTrips] = useState([]);
  const [filter, setFilter] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchTrips = async () => {
      try {
        setLoading(true);
        const { data } = await API.get('/trips');
        setTrips(data);
      } catch (err) {
        console.error('Error fetching trips:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchTrips();
  }, []);

  const filteredTrips = trips?.filter(trip =>
    trip.title.toLowerCase().includes(filter.toLowerCase())
  );

  return (
    <div className="pt-20 pb-8 px-4 md:px-8 bg-gray-50 dark:bg-gray-900 min-h-screen">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
        <div>
          <h1 className="text-4xl font-bold text-gray-800 dark:text-gray-200 flex items-center gap-3">
            <MapPin className="w-8 h-8 text-blue-600" />
            Explore Trips
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">
            Discover and join amazing adventures
          </p>
        </div>

        {/* Create Trip Button */}
        <Link
          to="/trips/create"
          className="group relative overflow-hidden rounded-lg bg-blue-600 px-4 py-2 text-white shadow-lg transition-all duration-300 hover:bg-blue-700 hover:shadow-xl active:scale-95"
        >
          <div className="relative flex items-center gap-2">
            <PlusCircle className="w-5 h-5 transition-transform group-hover:rotate-90" />
            <span>Create Trip</span>
          </div>
          <div className="absolute inset-0 h-full w-full scale-0 rounded-lg transition-all duration-300 group-hover:scale-100 group-hover:bg-white/10"></div>
        </Link>
      </div>

      <div className="max-w-3xl mx-auto mb-6 relative">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
          <input
            type="text"
            placeholder="Search trips by title..."
            className="w-full pl-10 pr-4 py-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-blue-600 transition dark:bg-gray-800 dark:border-gray-700 dark:text-gray-200"
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
          />
        </div>
      </div>

      {loading ? (
        <div className="flex justify-center items-center h-64">
          <Loader className="w-8 h-8 text-blue-600 animate-spin" />
        </div>
      ) : filteredTrips?.length === 0 ? (
        <div className="text-center py-12">
          <div className="text-gray-500 dark:text-gray-400">
            No trips found. Create a new one to get started!
          </div>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredTrips.map(trip => (
            <TripCard key={trip.id} trip={trip} />
          ))}
        </div>
      )}
    </div>
  );
};

export default Dashboard;

================
File: src/components/dashboard/TripCard.jsx
================
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Transition } from '@headlessui/react';
import { useAuth } from '../../hooks/useAuth';
import { Eye, UserPlus, X } from 'lucide-react';
import API from '../../api/api';
import toast from 'react-hot-toast';
import { Clock } from 'lucide-react';

const Modal = ({ isOpen, onClose, children }) => {
  return (
    <Transition show={isOpen} as={React.Fragment}>
      <div className="fixed inset-0 z-50 overflow-y-auto">
        <div className="flex min-h-screen items-center justify-center">
          {/* Backdrop */}
          <Transition.Child
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div 
              className="fixed inset-0 bg-black/50" 
              onClick={onClose}
              aria-hidden="true"
            />
          </Transition.Child>

          {/* Modal */}
          <Transition.Child
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
            className="relative w-full max-w-lg mx-4"
          >
            {children}
          </Transition.Child>
        </div>
      </div>
    </Transition>
  );
};

const JoinTripButton = ({ trip, onJoinRequest }) => {
  const [isJoining, setIsJoining] = useState(false);
  const [hasPendingRequest, setHasPendingRequest] = useState(false);
  const { user } = useAuth();

  useEffect(() => {
    const checkJoinStatus = async () => {
      try {
        const response = await API.get(`/trips/${trip.id}/joinStatus/${user.id}`);
        setHasPendingRequest(response.data.hasPendingRequest);
      } catch (error) {
        console.error('Error checking join status:', error);
      }
    };

    if (user) {
      checkJoinStatus();
    }
  }, [trip.id, user]);

  const handleJoinTrip = async (e) => {
    e.stopPropagation();
    try {
      setIsJoining(true);
      await API.post(`/trips/${trip.id}/join`);
      setHasPendingRequest(true);
      toast.success('Join request sent successfully!');
      if (onJoinRequest) {
        onJoinRequest();
      }
    } catch (error) {
      toast.error(error.response?.data || 'Failed to send join request');
      console.error('Error joining trip:', error);
    } finally {
      setIsJoining(false);
    }
  };

  if (hasPendingRequest) {
    return (
      <button
        disabled
        className="mt-4 w-full flex items-center justify-center gap-2 px-4 py-2 bg-gray-200 text-gray-600 rounded cursor-not-allowed"
      >
        <Clock className="w-5 h-5" />
        Pending
      </button>
    );
  }

  return (
    <button
      onClick={handleJoinTrip}
      disabled={isJoining}
      className={`mt-4 w-full flex items-center justify-center gap-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors ${
        isJoining ? 'opacity-75 cursor-not-allowed' : ''
      }`}
    >
      <UserPlus className="w-5 h-5" />
      {isJoining ? 'Sending Request...' : 'Join Trip'}
    </button>
  );
};

const TripCard = ({ trip }) => {
  const [modalOpen, setModalOpen] = useState(false);
  const { user } = useAuth();
  const isMember = trip.members && user && trip.members.some(member => member.id === user.id);

  return (
    <div className="relative">
      {/* Trip Card */}
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-md overflow-hidden">
        <div className="absolute top-2 right-2 z-10">
          <button
            onClick={() => setModalOpen(true)}
            className="p-2 bg-white/90 dark:bg-gray-800/90 rounded-full shadow hover:bg-white dark:hover:bg-gray-800 transition-all"
            title="View Details"
          >
            <Eye className="w-5 h-5 text-gray-600 dark:text-gray-300" />
          </button>
        </div>

        <img src={trip.image || '/default-trip.jpg'} alt={trip.title} className="w-full h-40 object-cover" />
        <div className="p-4">
          <h2 className="text-xl font-bold text-gray-800 dark:text-gray-200">{trip.title}</h2>
          <p className="text-gray-600 dark:text-gray-300">{trip.destination}</p>
          <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
            {new Date(trip.startDate).toLocaleDateString()} - {new Date(trip.endDate).toLocaleDateString()}
          </p>
        </div>
      </div>

      {/* Modal */}
      <Modal isOpen={modalOpen} onClose={() => setModalOpen(false)}>
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl relative">
          <button 
            onClick={() => setModalOpen(false)} 
            className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          >
            <X className="w-6 h-6" />
          </button>
          
          <div className="p-6">
            <img src={trip.image || '/default-trip.jpg'} alt={trip.title} className="w-full h-48 object-cover rounded" />
            <h2 className="text-2xl font-bold mt-4 text-gray-800 dark:text-gray-200">{trip.title}</h2>
            <p className="text-gray-600 dark:text-gray-300">{trip.destination}</p>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
              {new Date(trip.startDate).toLocaleDateString()} - {new Date(trip.endDate).toLocaleDateString()}
            </p>
            <p className="mt-4 text-gray-700 dark:text-gray-300">{trip.description}</p>
            <div className="mt-6 text-right">
              {isMember ? (
                <Link
                  to={`/trips/${trip.id}`}
                  className="inline-block px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
                >
                  View Full Details
                </Link>
              ) : (
                <JoinTripButton trip={trip} />
              )}
            </div>
          </div>
        </div>
      </Modal>
    </div>
  );
};
export default TripCard;

================
File: src/components/dashboard/TripDetails.jsx
================
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import API from '../../api/api';
import { Tab } from '@headlessui/react';
import { useTripAccess } from '../../hooks/useTripAccess';
import { useAuth } from '../../hooks/useAuth';
import Itinerary from '../trip/Itinerary';
import PackingChecklist from '../trip/PackingChecklist';
import Expenses from '../trip/Expenses';
import GroupChat from '../chat/GroupChat';
import Weather from '../layout/Weather';
import PersonalItinerary from '../trip/PersonalItinerary';
import JoinRequests from '../trip/JoinRequests';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronRight, ChevronLeft, Menu } from 'lucide-react';

function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}

const TripDetails = () => {
  const { id } = useParams();
  const { user } = useAuth();
  const [trip, setTrip] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedTab, setSelectedTab] = useState(0);
  const [showMobileMenu, setShowMobileMenu] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const isMember = useTripAccess(trip);
  const [isOrganizer, setIsOrganizer] = useState(false);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    const fetchTripDetails = async () => {
      try {
        setLoading(true);
        const { data } = await API.get(`/trips/${id}`);
        setTrip(data);
        setIsOrganizer(data.organizer === user.id);
      } catch (err) {
        console.error('Error fetching trip details:', err);
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchTripDetails();
    }
  }, [id, user.id]);

  const tabs = [
    { name: 'Group Itinerary', component: <Itinerary tripId={id} /> },
    { name: 'Personal Itinerary', component: <PersonalItinerary tripId={id} /> },
    { name: 'Packing List', component: <PackingChecklist tripId={id} /> },
    { name: 'Expenses', component: <Expenses tripId={id} isOrganizer={isOrganizer} /> },
    { name: 'Group Chat', component: <GroupChat tripId={id} /> }
  ];

  if (isOrganizer) {
    tabs.push({ name: 'Join Requests', component: <JoinRequests tripId={id} /> });
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 pt-16">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Trip Header */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden mb-6">
          <div className="relative h-48 sm:h-64">
            <img 
              src={trip?.image || '/default-trip.jpg'} 
              alt={trip?.title} 
              className="w-full h-full object-cover"
            />
            <div className="absolute inset-0 bg-black bg-opacity-40 flex items-end">
              <div className="p-6 text-white">
                <h1 className="text-2xl sm:text-4xl font-bold mb-2">{trip?.title}</h1>
                <p className="text-lg opacity-90">{trip?.destination}</p>
              </div>
            </div>
          </div>
          <div className="p-6">
            <Weather destination={trip?.destination} />
          </div>
        </div>

        {/* Mobile Tab Menu Toggle */}
        {isMobile && (
          <button
            onClick={() => setShowMobileMenu(!showMobileMenu)}
            className="fixed bottom-4 right-4 z-50 w-12 h-12 bg-blue-600 text-white rounded-full shadow-lg flex items-center justify-center"
          >
            <Menu className="w-6 h-6" />
          </button>
        )}

        {/* Mobile Tab Menu */}
        <AnimatePresence>
          {isMobile && showMobileMenu && (
            <motion.div
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 50 }}
              className="fixed bottom-20 right-4 z-50 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 w-64"
            >
              <div className="space-y-2">
                {tabs.map((tab, index) => (
                  <button
                    key={tab.name}
                    onClick={() => {
                      setSelectedTab(index);
                      setShowMobileMenu(false);
                    }}
                    className={`w-full text-left px-4 py-2 rounded-lg transition-colors ${
                      selectedTab === index
                        ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400'
                        : 'hover:bg-gray-100 dark:hover:bg-gray-700'
                    }`}
                  >
                    {tab.name}
                  </button>
                ))}
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Tab Navigation */}
        {isMember ? (
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg">
            <Tab.Group selectedIndex={selectedTab} onChange={setSelectedTab}>
              <Tab.List className="flex space-x-1 p-1 overflow-x-auto">
                {tabs.map((tab) => (
                  <Tab
                    key={tab.name}
                    className={({ selected }) =>
                      classNames(
                        'flex-shrink-0 px-4 py-2 text-sm font-medium rounded-lg transition-colors',
                        'focus:outline-none focus:ring-2 ring-offset-2 ring-offset-blue-400 ring-white ring-opacity-60',
                        selected
                          ? 'bg-blue-600 text-white shadow'
                          : 'text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'
                      )
                    }
                  >
                    {tab.name}
                  </Tab>
                ))}
              </Tab.List>
              <Tab.Panels className="p-4">
                {tabs.map((tab, idx) => (
                  <Tab.Panel
                    key={idx}
                    className={classNames(
                      'rounded-xl focus:outline-none'
                    )}
                  >
                    {tab.component}
                  </Tab.Panel>
                ))}
              </Tab.Panels>
            </Tab.Group>
          </div>
        ) : (
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 text-center">
            <p className="text-gray-600 dark:text-gray-400">
              Join this trip to view full details and participate in activities.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default TripDetails;

================
File: src/components/layout/Footer.jsx
================
import React from 'react';

const Footer = () => (
  <footer className="bg-gray-800 dark:bg-gray-900 text-gray-200 text-center py-4">
    <p>© 2025 TravelBuddy. All rights reserved.</p>
  </footer>
);

export default Footer;

================
File: src/components/layout/Navbar.jsx
================
import React, { useState, useRef, useEffect } from 'react';
import { Link, NavLink, useNavigate } from 'react-router-dom';
import { useDarkMode } from '../../hooks/useDarkMode';
import { useAuth } from '../../hooks/useAuth';
import { Transition } from '@headlessui/react';

const NAV_LINKS = [
  { to: '/', label: 'Dashboard' },
  { to: '/friends', label: 'Friends' },
  { to: '/calendar', label: 'Calendar' },
];

// NavLinks renders appropriate links based on authentication status.
const NavLinks = ({ user, onClick }) => {
  if (user) {
    return (
      <>
        {NAV_LINKS.map(({ to, label }) => (
          <NavLink
            key={to}
            to={to}
            onClick={onClick}
            className={({ isActive }) =>
              isActive
                ? 'block text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 pb-1'
                : 'block text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 pb-1'
            }
          >
            {label}
          </NavLink>
        ))}
      </>
    );
  }
  return (
    <>
      <Link
        to="/login"
        onClick={onClick}
        className="block text-gray-700 dark:text-gray-300 hover:text-blue-600"
      >
        Login
      </Link>
      <Link
        to="/register"
        onClick={onClick}
        className="block text-gray-700 dark:text-gray-300 hover:text-blue-600"
      >
        Register
      </Link>
    </>
  );
};

const UserDropdown = () => {
  const [open, setOpen] = useState(false);
  const dropdownRef = useRef(null);
  const navigate = useNavigate();
  const { user, logout } = useAuth();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleLogout = () => {
    logout();
    setOpen(false);
    navigate('/login');
  };

  const menuItems = [
    { label: 'Profile', path: `/profile/${user.id}` },
    { label: 'Logout', onClick: handleLogout }
  ];

  return (
    <div className="relative ml-4" ref={dropdownRef}>
      <button
        onClick={() => setOpen(!open)}
        className="flex items-center focus:outline-none focus:ring-2 focus:ring-blue-600 rounded-lg p-1 transition-all duration-200"
      >
        <img 
          className="h-8 w-8 rounded-full" 
          src={user?.profilePicture || "/default-avatar.png"} 
          alt="User" 
        />
        <span className="ml-2 text-gray-700 dark:text-gray-300">
          {user?.username || 'My Account'}
        </span>
        <svg 
          className={`ml-1 h-4 w-4 text-gray-600 dark:text-gray-300 transition-transform duration-200 ${
            open ? 'rotate-180' : ''
          }`} 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      <Transition
        show={open}
        enter="transition ease-out duration-200"
        enterFrom="transform opacity-0 scale-95"
        enterTo="transform opacity-100 scale-100"
        leave="transition ease-in duration-150"
        leaveFrom="transform opacity-100 scale-100"
        leaveTo="transform opacity-0 scale-95"
      >
        <div 
          className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-gray-700 ring-1 ring-black ring-opacity-5"
        >
          <div className="py-1">
            {menuItems.map((item) => (
              item.path ? (
                <Link
                  key={item.label}
                  to={item.path}
                  className="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors duration-150"
                  onClick={() => setOpen(false)}
                >
                  {item.label}
                </Link>
              ) : (
                <button
                  key={item.label}
                  onClick={item.onClick}
                  className="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors duration-150"
                >
                  {item.label}
                </button>
              )
            ))}
          </div>
        </div>
      </Transition>
    </div>
  );
};

const Navbar = () => {
  const [mobileOpen, setMobileOpen] = useState(false);
  const { isDark, toggleDarkMode } = useDarkMode();
  const { user } = useAuth();

  return (
    <header className="fixed w-full z-[1000] bg-white dark:bg-gray-800 shadow-lg">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-16">
        {/* Logo */}
        <Link to="/" className="text-2xl font-extrabold text-blue-600 dark:text-blue-400">
          TravelBuddy
        </Link>
        {/* Desktop Navigation: aligned to right */}
        <nav className="hidden md:flex flex-1 justify-end items-center space-x-6">
          <NavLinks user={user} />
          {user && <UserDropdown />}
        </nav>
        {/* Mobile Navigation Toggle */}
        <div className="md:hidden">
          <button
            onClick={() => setMobileOpen((prev) => !prev)}
            className="text-gray-700 dark:text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-600"
          >
            <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              {mobileOpen ? (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              ) : (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8h16M4 16h16" />
              )}
            </svg>
          </button>
        </div>
      </div>
      {/* Mobile Navigation Container: Always rendered; animation applied via transform */}
      <div
        className={`fixed left-0 z-50 bg-white dark:bg-gray-800 shadow-lg w-64 transition-transform duration-300 ${
          mobileOpen ? 'translate-x-0' : '-translate-x-full'
        }`}
        style={{ top: '4rem', height: 'calc(100vh - 4rem)' }}
      >
        <nav className="flex flex-col space-y-4 p-4">
          <NavLinks user={user} onClick={() => setMobileOpen(false)} />
          {user && <UserDropdown />}
        </nav>
      </div>
    </header>
  );
};

export default Navbar;

================
File: src/components/layout/Notifications.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { Transition } from '@headlessui/react';
import API from '../../api/api';
import { useAuth } from '../../hooks/useAuth';
import { Bell } from 'lucide-react';

const NotificationDetails = ({ notification, onBack }) => {
  return (
    <div className="p-4">
      <button 
        onClick={onBack} 
        className="mb-2 text-blue-600 dark:text-blue-400 hover:underline"
      >
        &larr; Back
      </button>
      <h4 className="font-bold text-gray-800 dark:text-gray-200 mb-2">{notification.title}</h4>
      <p className="text-gray-700 dark:text-gray-300">{notification.message}</p>
    </div>
  );
};

const Notifications = () => {
  const { user } = useAuth();
  const [notifications, setNotifications] = useState([]);
  const [visible, setVisible] = useState(false);
  const [selectedNotification, setSelectedNotification] = useState(null);
  const [unreadCount, setUnreadCount] = useState(0);
  const panelRef = useRef(null);

  useEffect(() => {
    if (user) {
      API.get('/notifications')
        .then((res) => {
          if (res.data) {
            setNotifications(res.data);
            setUnreadCount(res.data.filter(n => !n.read).length);
          }
        })
        .catch((err) => console.error('Error fetching notifications:', err));
    }
  }, [user]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (panelRef.current && !panelRef.current.contains(event.target)) {
        setVisible(false);
        setSelectedNotification(null);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  if (!user) return null;

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {/* Notification Bell Button */}
      <button 
        onClick={() => setVisible(!visible)}
        className="w-12 h-12 bg-blue-600 text-white rounded-full shadow-lg flex items-center justify-center hover:bg-blue-700 transition-colors relative"
        aria-label="Notifications"
      >
        <Bell className="w-6 h-6" />
        {unreadCount > 0 && (
          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
            {unreadCount}
          </span>
        )}
      </button>

      {/* Notification Panel */}
      <Transition
        show={visible}
        enter="transition ease-out duration-200"
        enterFrom="transform opacity-0 scale-95"
        enterTo="transform opacity-100 scale-100"
        leave="transition ease-in duration-150"
        leaveFrom="transform opacity-100 scale-100"
        leaveTo="transform opacity-0 scale-95"
      >
        <div 
          ref={panelRef}
          className="absolute bottom-16 right-0 w-80 max-w-sm bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden"
        >
          {!selectedNotification ? (
            <>
              <div className="p-4 border-b dark:border-gray-700">
                <h4 className="font-bold text-gray-800 dark:text-gray-200">
                  Notifications
                </h4>
              </div>
              <div className="max-h-96 overflow-y-auto">
                {notifications.length === 0 ? (
                  <p className="text-gray-500 dark:text-gray-400 p-4 text-center">
                    No notifications
                  </p>
                ) : (
                  notifications.map((note) => (
                    <div 
                      key={note.id} 
                      onClick={() => setSelectedNotification(note)}
                      className="border-b dark:border-gray-700 p-4 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer"
                    >
                      <div className="flex justify-between items-center">
                        <p className="text-gray-700 dark:text-gray-300">{note.title}</p>
                        {!note.read && (
                          <span className="w-2 h-2 bg-blue-600 rounded-full" />
                        )}
                      </div>
                    </div>
                  ))
                )}
              </div>
            </>
          ) : (
            <NotificationDetails 
              notification={selectedNotification} 
              onBack={() => setSelectedNotification(null)} 
            />
          )}
        </div>
      </Transition>
    </div>
  );
};

export default Notifications;

================
File: src/components/layout/Weather.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';

const Weather = ({ destination }) => {
  const [weather, setWeather] = useState(null);

  useEffect(() => {
    if (destination) {
      API.get(`/weather/${destination}`)
        .then((res) => setWeather(res.data))
        .catch((err) => console.error(err));
    }
  }, [destination]);

  if (!weather) return <p className="text-gray-600">Loading weather...</p>;

  return (
    <div className="p-4 border rounded shadow mb-4">
      <h3 className="text-xl font-bold mb-2">Weather Forecast</h3>
      <p className="text-gray-700">
        {weather.description} - {weather.temperature}°C
      </p>
    </div>
  );
};

export default Weather;

================
File: src/components/social/Friends.jsx
================
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import API from '../../api/api';
import { useAuth } from '../../hooks/useAuth';
import { 
  Users, 
  UserPlus, 
  X, 
  Check, 
  MessageCircle, 
  Search,
  Clock,
  ChevronRight,
  UserMinus
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import toast from 'react-hot-toast';

const FriendCard = ({ friend, onRemove, onChat }) => {
  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 flex items-center justify-between"
    >
      <Link to={`/profile/${friend.username}`} className="flex items-center gap-4 flex-1">
        <img
          src={friend.profilePicture || '/default-avatar.png'}
          alt={friend.username}
          className="w-12 h-12 rounded-full object-cover"
        />
        <div>
          <h3 className="font-semibold text-gray-800 dark:text-gray-200">
            {friend.username}
          </h3>
          <p className="text-sm text-gray-500 dark:text-gray-400">
            {friend.bio?.substring(0, 60) || 'No bio available'}
            {friend.bio?.length > 60 ? '...' : ''}
          </p>
        </div>
      </Link>
      <div className="flex items-center gap-2">
        <button
          onClick={() => onChat(friend)}
          className="p-2 text-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-full transition-colors"
          title="Chat"
        >
          <MessageCircle className="w-5 h-5" />
        </button>
        <button
          onClick={() => onRemove(friend)}
          className="p-2 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-full transition-colors"
          title="Remove Friend"
        >
          <UserMinus className="w-5 h-5" />
        </button>
      </div>
    </motion.div>
  );
};

const FriendRequest = ({ request, onAccept, onDecline }) => {
  return (
    <motion.div
      layout
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: 20 }}
      className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4"
    >
      <div className="flex items-center justify-between">
        <Link to={`/profile/${request.sender.username}`} className="flex items-center gap-4">
          <img
            src={request.sender.profilePicture || '/default-avatar.png'}
            alt={request.sender.username}
            className="w-12 h-12 rounded-full object-cover"
          />
          <div>
            <h3 className="font-semibold text-gray-800 dark:text-gray-200">
              {request.sender.username}
            </h3>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              Sent you a friend request
            </p>
          </div>
        </Link>
        <div className="flex items-center gap-2">
          <button
            onClick={() => onAccept(request)}
            className="p-2 text-green-500 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-full transition-colors"
          >
            <Check className="w-5 h-5" />
          </button>
          <button
            onClick={() => onDecline(request)}
            className="p-2 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-full transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
      </div>
    </motion.div>
  );
};

const Friends = () => {
  const { user } = useAuth();
  const [friends, setFriends] = useState([]);
  const [pendingRequests, setPendingRequests] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('friends'); // 'friends' or 'requests'

  useEffect(() => {
    fetchFriends();
  }, [user?.id]);

  const fetchFriends = async () => {
    try {
      setLoading(true);
      const [friendsRes, requestsRes] = await Promise.all([
        API.get(`/friends/${user.id}`),
        API.get(`/friends/${user.id}/pending`)
      ]);
      setFriends(friendsRes.data);
      setPendingRequests(requestsRes.data);
    } catch (err) {
      console.error('Error fetching friends data:', err);
      toast.error('Failed to load friends');
    } finally {
      setLoading(false);
    }
  };

  const acceptRequest = async (request) => {
    try {
      const response = await API.post(`/friends/${user.id}/accept/${request.id}`);
      setPendingRequests(response.data);
      fetchFriends(); // Refresh friends list
      toast.success(`Accepted ${request.sender.username}'s friend request`);
    } catch (err) {
      console.error('Error accepting friend request:', err);
      toast.error('Failed to accept request');
    }
  };

  const declineRequest = async (request) => {
    try {
      const response = await API.post(`/friends/${user.id}/decline/${request.id}`);
      setPendingRequests(response.data);
      toast.success(`Declined ${request.sender.username}'s friend request`);
    } catch (err) {
      console.error('Error declining friend request:', err);
      toast.error('Failed to decline request');
    }
  };

  const removeFriend = async (friend) => {
    try {
      const response = await API.delete(`/friends/user/${user.id}/friends/${friend.id}`);
      setFriends(response.data);
      toast.success(`Removed ${friend.username} from friends`);
    } catch (err) {
      console.error('Error removing friend:', err);
      toast.error('Failed to remove friend');
    }
  };

  const startChat = (friend) => {
    // Navigate to chat or open chat popup
    toast.success(`Starting chat with ${friend.username}`);
  };

  const filteredFriends = friends.filter(friend =>
    friend.username.toLowerCase().includes(searchQuery.toLowerCase())
  );

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      <div className="flex flex-col sm:flex-row items-center justify-between gap-4 mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-800 dark:text-gray-200">
            Friends
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            Manage your connections
          </p>
        </div>
        <div className="flex items-center gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search friends..."
              className="pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white w-full sm:w-64"
            />
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
        {/* Sidebar */}
        <div className="md:col-span-1">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
            <button
              onClick={() => setActiveTab('friends')}
              className={`w-full px-4 py-3 flex items-center justify-between ${
                activeTab === 'friends'
                  ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400'
                  : 'text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center gap-3">
                <Users className="w-5 h-5" />
                <span>Friends</span>
              </div>
              <span className="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded-full text-sm">
                {friends.length}
              </span>
            </button>
            <button
              onClick={() => setActiveTab('requests')}
              className={`w-full px-4 py-3 flex items-center justify-between ${
                activeTab === 'requests'
                  ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400'
                  : 'text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center gap-3">
                <UserPlus className="w-5 h-5" />
                <span>Requests</span>
              </div>
              {pendingRequests.length > 0 && (
                <span className="bg-red-500 text-white px-2 py-1 rounded-full text-sm">
                  {pendingRequests.length}
                </span>
              )}
            </button>
          </div>
        </div>

        {/* Main Content */}
        <div className="md:col-span-3">
          <AnimatePresence mode="wait">
            {activeTab === 'friends' ? (
              <motion.div
                key="friends"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-4"
              >
                {filteredFriends.length === 0 ? (
                  <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 text-center">
                    <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mb-2">
                      No friends found
                    </h3>
                    <p className="text-gray-600 dark:text-gray-400">
                      {searchQuery
                        ? 'No friends match your search'
                        : 'Start adding friends to see them here'}
                    </p>
                  </div>
                ) : (
                  <div className="grid gap-4">
                    {filteredFriends.map((friend) => (
                      <FriendCard
                        key={friend.id}
                        friend={friend}
                        onRemove={removeFriend}
                        onChat={startChat}
                      />
                    ))}
                  </div>
                )}
              </motion.div>
            ) : (
              <motion.div
                key="requests"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-4"
              >
                {pendingRequests.length === 0 ? (
                  <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 text-center">
                    <Clock className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mb-2">
                      No pending requests
                    </h3>
                    <p className="text-gray-600 dark:text-gray-400">
                      You have no pending friend requests
                    </p>
                  </div>
                ) : (
                  <div className="grid gap-4">
                    {pendingRequests.map((request) => (
                      <FriendRequest
                        key={request.id}
                        request={request}
                        onAccept={acceptRequest}
                        onDecline={declineRequest}
                      />
                    ))}
                  </div>
                )}
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
};

export default Friends;

================
File: src/components/social/Reviews.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';

const Reviews = ({ reviewerId, revieweeId }) => {
  const [reviews, setReviews] = useState([]);
  const [newReview, setNewReview] = useState({ rating: 5, comment: '' });

  useEffect(() => {
    API.get(`/reviews/${revieweeId}`).then((res) => setReviews(res.data));
  }, [revieweeId]);

  const submitReview = async () => {
    const res = await API.post('/reviews', { reviewer: reviewerId, reviewee: revieweeId, ...newReview });
    setReviews([...reviews, res.data]);
    setNewReview({ rating: 5, comment: '' });
  };

  const averageRating = reviews.length ? (reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length).toFixed(1) : 'No ratings';

  return (
    <div>
      <h3 className="text-xl font-bold mb-4">User Reviews (Average Rating: {averageRating})</h3>
      <div className="mb-4">
        <select value={newReview.rating} onChange={(e) => setNewReview({ ...newReview, rating: parseInt(e.target.value) })} className="px-4 py-2 border rounded mr-2">
          {[1,2,3,4,5].map(n => (
            <option key={n} value={n}>{n} Star{n > 1 && 's'}</option>
          ))}
        </select>
        <input type="text" placeholder="Write a review..." value={newReview.comment} onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })} className="px-4 py-2 border rounded mr-2 w-2/3" />
        <button onClick={submitReview} className="bg-blue-600 text-white px-4 py-2 rounded">Submit</button>
      </div>
      <ul>
        {reviews.map((rev) => (
          <li key={rev.id} className="border-b py-2">
            <p><strong>{rev.rating} Stars</strong> - {rev.comment}</p>
            <p className="text-gray-500 text-sm">By {rev.reviewer.username} on {new Date(rev.createdAt).toLocaleDateString()}</p>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Reviews;

================
File: src/components/trip/CalendarSync.jsx
================
import React, { useState } from 'react';
import API from '../../api/api';

const CalendarSync = ({ tripId }) => {
  const [synced, setSynced] = useState(false);
  const [error, setError] = useState('');

  const syncCalendar = async () => {
    try {
      await API.post(`/calendar/sync/${tripId}`);
      setSynced(true);
      setTimeout(() => setSynced(false), 3000);
    } catch (err) {
      console.error('Calendar sync error:', err);
      setError('Calendar sync failed.');
      setTimeout(() => setError(''), 3000);
    }
  };

  return (
    <div className="p-4 border rounded shadow mb-4">
      <h3 className="text-xl font-bold mb-2">Calendar Integration</h3>
      <button onClick={syncCalendar} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">
        Sync with Google Calendar
      </button>
      {synced && <p className="mt-2 text-green-600">Calendar synced successfully!</p>}
      {error && <p className="mt-2 text-red-600">{error}</p>}
    </div>
  );
};

export default CalendarSync;

================
File: src/components/trip/CreateTrip.jsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import API from '../../api/api';

const CreateTrip = () => {
  const [tripData, setTripData] = useState({
    title: '',
    destination: '',
    startDate: '',
    endDate: '',
    description: ''
  });
  const [errors, setErrors] = useState({});
  const navigate = useNavigate();

  const onChange = (e) => {
    setTripData({ ...tripData, [e.target.name]: e.target.value });
    setErrors({ ...errors, [e.target.name]: '' });
  };

  // Validate a specific field on blur
  const validateField = (name, value) => {
    let error = '';
    switch (name) {
      case 'title':
        if (!value.trim()) {
          error = 'Trip title is required';
        } else if (value.trim().length < 3) {
          error = 'Trip title must be at least 3 characters';
        }
        break;
      case 'destination':
        if (!value.trim()) {
          error = 'Destination is required';
        }
        break;
      case 'startDate':
        if (!value) {
          error = 'Start date is required';
        }
        break;
      case 'endDate':
        if (!value) {
          error = 'End date is required';
        } else if (tripData.startDate && value < tripData.startDate) {
          error = 'End date must be after the start date';
        }
        break;
      case 'description':
        if (!value.trim()) {
          error = 'Description is required';
        } else if (value.trim().length < 10) {
          error = 'Description should be at least 10 characters long';
        }
        break;
      default:
        break;
    }
    setErrors((prev) => ({ ...prev, [name]: error }));
  };

  const validate = () => {
    let newErrors = {};
    if (!tripData.title.trim()) {
      newErrors.title = 'Trip title is required';
    } else if (tripData.title.trim().length < 3) {
      newErrors.title = 'Trip title must be at least 3 characters';
    }
    if (!tripData.destination.trim()) {
      newErrors.destination = 'Destination is required';
    }
    if (!tripData.startDate) {
      newErrors.startDate = 'Start date is required';
    }
    if (!tripData.endDate) {
      newErrors.endDate = 'End date is required';
    } else if (tripData.startDate && tripData.endDate < tripData.startDate) {
      newErrors.endDate = 'End date must be after the start date';
    }
    if (!tripData.description.trim()) {
      newErrors.description = 'Description is required';
    } else if (tripData.description.trim().length < 10) {
      newErrors.description = 'Description should be at least 10 characters long';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validate()) return;
    try {
      const response = await API.post('/trips', tripData);
      navigate(`/trip/${response.data.id}`);
    } catch (error) {
      console.error('Error creating trip:', error);
      setErrors({ form: 'An error occurred while creating the trip. Please try again.' });
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 p-4">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl p-8 w-full max-w-lg">
        <h2 className="text-3xl font-bold text-center text-blue-600 dark:text-blue-400 mb-6">
          Create a New Trip
        </h2>
        {errors.form && <p className="mb-4 text-center text-red-600">{errors.form}</p>}
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-700 dark:text-gray-300">Trip Title</label>
            <input
              type="text"
              name="title"
              value={tripData.title}
              onChange={onChange}
              onBlur={(e) => validateField(e.target.name, e.target.value)}
              className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
            />
            {errors.title && <p className="text-red-600 text-sm mt-1">{errors.title}</p>}
          </div>
          <div className="mb-4">
            <label className="block text-gray-700 dark:text-gray-300">Destination</label>
            <input
              type="text"
              name="destination"
              value={tripData.destination}
              onChange={onChange}
              onBlur={(e) => validateField(e.target.name, e.target.value)}
              className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
            />
            {errors.destination && <p className="text-red-600 text-sm mt-1">{errors.destination}</p>}
          </div>
          <div className="mb-4 grid grid-cols-2 gap-4">
            <div>
              <label className="block text-gray-700 dark:text-gray-300">Start Date</label>
              <input
                type="date"
                name="startDate"
                value={tripData.startDate}
                onChange={onChange}
                onBlur={(e) => validateField(e.target.name, e.target.value)}
                className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
              />
              {errors.startDate && <p className="text-red-600 text-sm mt-1">{errors.startDate}</p>}
            </div>
            <div>
              <label className="block text-gray-700 dark:text-gray-300">End Date</label>
              <input
                type="date"
                name="endDate"
                value={tripData.endDate}
                onChange={onChange}
                onBlur={(e) => validateField(e.target.name, e.target.value)}
                className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
              />
              {errors.endDate && <p className="text-red-600 text-sm mt-1">{errors.endDate}</p>}
            </div>
          </div>
          <div className="mb-4">
            <label className="block text-gray-700 dark:text-gray-300">Description</label>
            <textarea
              name="description"
              value={tripData.description}
              onChange={onChange}
              onBlur={(e) => validateField(e.target.name, e.target.value)}
              className="mt-1 w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-600 transition"
              rows="4"
            ></textarea>
            {errors.description && <p className="text-red-600 text-sm mt-1">{errors.description}</p>}
          </div>
          <button type="submit" className="w-full bg-blue-600 dark:bg-blue-500 text-white py-2 rounded hover:bg-blue-700 transition">
            Create Trip
          </button>
        </form>
      </div>
    </div>
  );
};

export default CreateTrip;

================
File: src/components/trip/Expenses.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';
import { useAuth } from '../../hooks/useAuth';
import { Plus, DollarSign, X } from 'lucide-react';
import toast from 'react-hot-toast';

const Expenses = ({ tripId, isOrganizer }) => {
  const [expenses, setExpenses] = useState([]);
  const [newExpense, setNewExpense] = useState({
    amount: '',
    reason: ''
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchExpenses();
  }, [tripId]);

  const fetchExpenses = async () => {
    try {
      setLoading(true);
      const response = await API.get(`/expenses/${tripId}`);
      setExpenses(response.data || []);
    } catch (err) {
      console.error('Error fetching expenses:', err);
      toast.error('Failed to load expenses');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!newExpense.amount || !newExpense.reason) {
      toast.error('Please fill in all fields');
      return;
    }

    try {
      const response = await API.post('/expenses', {
        ...newExpense,
        tripId
      });

      if (response.data) {
        setExpenses(response.data);
        setNewExpense({ amount: '', reason: '' });
        toast.success('Expense added successfully');
      }
    } catch (err) {
      console.error('Error adding expense:', err);
      toast.error('Failed to add expense');
    }
  };

  const deleteExpense = async (expenseId) => {
    if (!isOrganizer) return;
    
    try {
      await API.delete(`/expenses/${expenseId}`);
      setExpenses(expenses.filter(exp => exp.id !== expenseId));
      toast.success('Expense deleted successfully');
    } catch (err) {
      console.error('Error deleting expense:', err);
      toast.error('Failed to delete expense');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center p-4">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  const totalExpenses = expenses.reduce((sum, exp) => sum + parseFloat(exp.amount), 0);

  return (
    <div className="space-y-6">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="relative flex-1">
            <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="number"
              step="0.01"
              min="0"
              value={newExpense.amount}
              onChange={(e) => setNewExpense({ ...newExpense, amount: e.target.value })}
              placeholder="Amount"
              className="w-full pl-10 pr-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <input
            type="text"
            value={newExpense.reason}
            onChange={(e) => setNewExpense({ ...newExpense, reason: e.target.value })}
            placeholder="Reason for expense"
            className="flex-1 px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center gap-2"
          >
            <Plus className="w-5 h-5" />
            <span className="hidden sm:inline">Add Expense</span>
          </button>
        </div>
      </form>

      <div className="bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 p-6 rounded-lg">
        <h3 className="text-2xl font-bold text-blue-800 dark:text-blue-200">
          Total Expenses: ${totalExpenses.toFixed(2)}
        </h3>
      </div>

      {expenses.length === 0 ? (
        <p className="text-gray-500 text-center">No expenses logged yet.</p>
      ) : (
        <div className="grid gap-4 sm:grid-cols-2">
          {expenses.map((expense) => (
            <div
              key={expense.id}
              className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow"
            >
              <div className="flex justify-between items-start">
                <div>
                  <p className="font-medium text-gray-800 dark:text-gray-200">
                    {expense.reason}
                  </p>
                  <p className="text-lg font-bold text-green-600 dark:text-green-400">
                    ${parseFloat(expense.amount).toFixed(2)}
                  </p>
                </div>
                {isOrganizer && (
                  <button
                    onClick={() => deleteExpense(expense.id)}
                    className="p-2 text-red-500 hover:text-red-700 transition-colors rounded-full hover:bg-red-50 dark:hover:bg-red-900/20"
                  >
                    <X className="w-5 h-5" />
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Expenses;

================
File: src/components/trip/Itinerary.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';
import { useAuth } from '../../hooks/useAuth';
import { PlusCircle, X, Download } from 'lucide-react';
import toast from 'react-hot-toast';

const Itinerary = ({ tripId }) => {
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activityName, setActivityName] = useState('');
  const { user } = useAuth();

  useEffect(() => {
    fetchItinerary();
  }, [tripId]);

  const fetchItinerary = async () => {
    try {
      setLoading(true);
      const response = await API.get(`/itineraries/${tripId}`);
      setItems(response.data || []);
    } catch (err) {
      console.error('Error fetching itinerary:', err);
      toast.error('Failed to load itinerary');
    } finally {
      setLoading(false);
    }
  };

  const addItem = async (e) => {
    e.preventDefault();
    if (!activityName.trim()) {
      toast.error('Please enter an activity name');
      return;
    }

    try {
      const response = await API.post(`/itineraries/${tripId}`, {
        activityName: activityName.trim(),
        tripId
      });

      if (response.data) {
        setItems(response.data);
        setActivityName('');
        toast.success('Activity added successfully');
      }
    } catch (err) {
      console.error('Error adding activity:', err);
      toast.error('Failed to add activity');
    }
  };

  const deleteItem = async (itemId) => {
    try {
      const response = await API.delete(`/itineraries/${itemId}`);
      if (response.status === 200) {
        setItems(items.filter(item => item.id !== itemId));
        toast.success('Activity deleted successfully');
      }
    } catch (err) {
      console.error('Error deleting activity:', err);
      toast.error('Failed to delete activity');
    }
  };

  const exportPdf = async () => {
    try {
      const response = await API.get(`/itineraries/export/${tripId}`, {
        responseType: 'blob',
        headers: {
          'Accept': 'application/pdf'
        }
      });
      
      const blob = new Blob([response.data], { type: 'application/pdf' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `itinerary-${tripId}.pdf`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      toast.success('Itinerary exported successfully');
    } catch (err) {
      console.error('Error exporting itinerary:', err);
      toast.error('Failed to export itinerary');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center p-4">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <form onSubmit={addItem} className="flex-1 mr-4">
          <div className="flex gap-2">
            <input
              type="text"
              value={activityName}
              onChange={(e) => setActivityName(e.target.value)}
              placeholder="Enter activity name..."
              className="flex-1 px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center gap-2"
            >
              <PlusCircle className="w-5 h-5" />
              <span className="hidden sm:inline">Add Activity</span>
            </button>
          </div>
        </form>
        
        <button
          onClick={exportPdf}
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition flex items-center gap-2"
        >
          <Download className="w-5 h-5" />
          <span className="hidden sm:inline">Export PDF</span>
        </button>
      </div>

      {items.length === 0 ? (
        <p className="text-gray-500 text-center p-4">No activities planned yet.</p>
      ) : (
        <div className="space-y-4">
          {items.map((item) => (
            <div
              key={item.id}
              className="bg-white dark:bg-gray-800 rounded-lg shadow p-4 flex justify-between items-center"
            >
              <span className="text-gray-800 dark:text-gray-200">
                {item.activityName}
              </span>
              <button
                onClick={() => deleteItem(item.id)}
                className="p-2 text-red-500 hover:text-red-700 transition-colors rounded-full hover:bg-red-50 dark:hover:bg-red-900/20"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Itinerary;

================
File: src/components/trip/JoinRequests.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';
import { Check, X } from 'lucide-react';
import toast from 'react-hot-toast';

const JoinRequests = ({ tripId }) => {
  const [requests, setRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchRequests();
  }, [tripId]); // Add tripId as dependency

  const fetchRequests = async () => {
    try {
      setLoading(true);
      const response = await API.get(`/trips/${tripId}/pendingRequests`);
      setRequests(response.data || []);
    } catch (err) {
      console.error('Error fetching join requests:', err);
      setError('Failed to load join requests');
      toast.error('Failed to load join requests');
    } finally {
      setLoading(false);
    }
  };

  const handleApprove = async (userId) => {
    try {
      await API.post(`/trips/${tripId}/approve/${userId}`); // Fixed API endpoint
      toast.success('Request approved successfully');
      // Refresh the requests list
      await fetchRequests();
    } catch (err) {
      console.error('Error approving join request:', err);
      toast.error('Failed to approve request');
    }
  };

  const handleDecline = async (userId) => {
    try {
      await API.post(`/trips/${tripId}/decline/${userId}`); // Fixed API endpoint
      toast.success('Request declined');
      // Refresh the requests list
      await fetchRequests();
    } catch (err) {
      console.error('Error declining join request:', err);
      toast.error('Failed to decline request');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-600 p-4 text-center">
        {error}
      </div>
    );
  }

  if (!requests || requests.length === 0) {
    return (
      <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-8 text-center">
        <p className="text-gray-600 dark:text-gray-300">No pending join requests.</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <h3 className="text-2xl font-bold text-gray-800 dark:text-gray-200">
        Pending Join Requests ({requests.length})
      </h3>
      <div className="grid grid-cols-1 gap-4">
        {requests.map((req) => (
          <div 
            key={req.id} 
            className="flex items-center bg-white dark:bg-gray-700 p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow"
          >
            <img
              src={req.profilePicture || '/default-avatar.png'}
              alt={req.username}
              className="w-12 h-12 rounded-full mr-4 object-cover"
            />
            <div className="flex-1">
              <p className="text-lg font-semibold text-gray-800 dark:text-gray-200">
                {req.username}
              </p>
              {req.bio && (
                <p className="text-sm text-gray-600 dark:text-gray-300 line-clamp-2">
                  {req.bio}
                </p>
              )}
            </div>
            <div className="flex space-x-3">
              <button
                onClick={() => handleApprove(req.id)}
                className="p-2 text-green-500 hover:text-green-600 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-full transition-colors"
                title="Approve Request"
              >
                <Check className="w-5 h-5" />
              </button>
              <button
                onClick={() => handleDecline(req.id)}
                className="p-2 text-red-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-full transition-colors"
                title="Decline Request"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default JoinRequests;

================
File: src/components/trip/PackingChecklist.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';
import { PlusCircle, X } from 'lucide-react';
import toast from 'react-hot-toast';

const PackingChecklist = ({ tripId }) => {
  const [items, setItems] = useState([]);
  const [categories, setCategories] = useState([]);
  const [newItem, setNewItem] = useState({
    itemName: '',
    category: ''
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchChecklist();
    fetchCategories();
  }, [tripId]);

  const fetchChecklist = async () => {
    try {
      const response = await API.get(`/checklists/${tripId}`);
      setItems(response.data || []);
    } catch (err) {
      console.error('Error fetching checklist:', err);
      toast.error('Failed to load checklist');
    } finally {
      setLoading(false);
    }
  };

  const fetchCategories = async () => {
    try {
      const response = await API.get('/checklists/categories');
      setCategories(response.data);
      // Set default category if available
      if (response.data.length > 0) {
        setNewItem(prev => ({ ...prev, category: response.data[0].name }));
      }
    } catch (err) {
      console.error('Error fetching categories:', err);
      toast.error('Failed to load categories');
    }
  };

  const addItem = async (e) => {
    e.preventDefault();
    if (!newItem.itemName.trim()) {
      toast.error('Please enter an item name');
      return;
    }

    try {
      const response = await API.post(`/checklists/${tripId}`, {
        itemName: newItem.itemName.trim(),
        category: newItem.category,
        tripId
      });

      setItems(response.data);
      setNewItem(prev => ({ ...prev, itemName: '' }));
      toast.success('Item added successfully');
    } catch (err) {
      console.error('Error adding item:', err);
      toast.error('Failed to add item');
    }
  };

  const deleteItem = async (itemId) => {
    try {
      await API.delete(`/checklists/${itemId}`);
      setItems(items.filter(item => item.id !== itemId));
      toast.success('Item deleted successfully');
    } catch (err) {
      console.error('Error deleting item:', err);
      toast.error('Failed to delete item');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center p-4">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  const itemsByCategory = items.reduce((acc, item) => {
    if (!acc[item.category]) {
      acc[item.category] = [];
    }
    acc[item.category].push(item);
    return acc;
  }, {});

  return (
    <div className="space-y-6">
      <form onSubmit={addItem} className="space-y-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <input
            type="text"
            value={newItem.itemName}
            onChange={(e) => setNewItem({ ...newItem, itemName: e.target.value })}
            placeholder="Enter item name..."
            className="flex-1 px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <select
            value={newItem.category}
            onChange={(e) => setNewItem({ ...newItem, category: e.target.value })}
            className="px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {categories.map((category) => (
              <option key={category.id} value={category.name}>
                {category.name}
              </option>
            ))}
          </select>
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center gap-2"
          >
            <PlusCircle className="w-5 h-5" />
            <span className="hidden sm:inline">Add Item</span>
          </button>
        </div>
      </form>

      {items.length === 0 ? (
        <div className="text-center py-8">
          <p className="text-gray-500">No items in checklist yet.</p>
        </div>
      ) : (
        <div className="space-y-6">
          {Object.entries(itemsByCategory).map(([category, categoryItems]) => (
            <div key={category} className="space-y-2">
              <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">
                {category}
              </h3>
              <div className="space-y-2">
                {categoryItems.map((item) => (
                  <div
                    key={item.id}
                    className="flex items-center justify-between p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm"
                  >
                    <span className="text-gray-800 dark:text-gray-200">
                      {item.name}
                    </span>
                    <button
                      onClick={() => deleteItem(item.id)}
                      className="p-1 text-red-500 hover:text-red-700 transition-colors rounded-full hover:bg-red-50 dark:hover:bg-red-900/20"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default PackingChecklist;

================
File: src/components/trip/PersonalItinerary.jsx
================
import React, { useState, useEffect } from 'react';
import API from '../../api/api';
import { useAuth } from '../../hooks/useAuth';
import { PlusCircle, X } from 'lucide-react';
import toast from 'react-hot-toast';

const PersonalItinerary = ({ tripId }) => {
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activityName, setActivityName] = useState('');
  const { user } = useAuth();

  useEffect(() => {
    fetchItinerary();
  }, [tripId, user?.id]);

  const fetchItinerary = async () => {
    if (!tripId || !user?.id) return;

    try {
      setLoading(true);
      const response = await API.get(`/itineraries/${tripId}/${user.id}`);
      setItems(response.data || []);
    } catch (err) {
      console.error('Error fetching personal itinerary:', err);
      toast.error('Failed to load personal itinerary');
    } finally {
      setLoading(false);
    }
  };

  const addItem = async (e) => {
    e.preventDefault();
    if (!activityName.trim()) {
      toast.error('Please enter an activity name');
      return;
    }

    try {
      const response = await API.post(`/itineraries/${tripId}/${user.id}`, {
        activityName: activityName.trim(),
        tripId,
        userId: user.id
      });

      if (response.data) {
        setItems(response.data);
        setActivityName('');
        toast.success('Activity added successfully');
      }
    } catch (err) {
      console.error('Error adding activity:', err);
      toast.error('Failed to add activity');
    }
  };

  const deleteItem = async (itemId) => {
    try {
      const response = await API.delete(`/itineraries/${itemId}`);
      if (response.status === 200) {
        setItems(items.filter(item => item.id !== itemId));
        toast.success('Activity deleted successfully');
      }
    } catch (err) {
      console.error('Error deleting activity:', err);
      toast.error('Failed to delete activity');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center p-4">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <form onSubmit={addItem} className="space-y-4">
        <div className="flex gap-2">
          <input
            type="text"
            value={activityName}
            onChange={(e) => setActivityName(e.target.value)}
            placeholder="Enter personal activity..."
            className="flex-1 px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center gap-2"
          >
            <PlusCircle className="w-5 h-5" />
            Add Activity
          </button>
        </div>
      </form>

      {items.length === 0 ? (
        <p className="text-gray-500 text-center p-4">No personal activities planned yet.</p>
      ) : (
        <div className="space-y-4">
          {items.map((item) => (
            <div
              key={item.id}
              className="bg-white dark:bg-gray-800 rounded-lg shadow p-4 flex justify-between items-center"
            >
              <span className="text-gray-800 dark:text-gray-200">
                {item.activityName}
              </span>
              <button
                onClick={() => deleteItem(item.id)}
                className="p-2 text-red-500 hover:text-red-700 transition-colors rounded-full hover:bg-red-50 dark:hover:bg-red-900/20"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default PersonalItinerary;

================
File: src/components/voting/Voting.jsx
================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../../hooks/useAuth';
import API from '../../api/api';
import { 
  Vote, 
  Check, 
  X, 
  BarChart2, 
  Users, 
  Clock,
  Lock,
  Unlock,
  Edit2
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import toast from 'react-hot-toast';

const VoteOption = ({ option, votes, userVote, onVote, totalVotes, disabled }) => {
  const percentage = totalVotes > 0 ? (votes.length / totalVotes) * 100 : 0;
  const hasVoted = userVote === option.id;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="relative"
    >
      <button
        onClick={() => onVote(option.id)}
        disabled={disabled}
        className={`relative w-full p-4 rounded-lg border ${
          hasVoted 
            ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' 
            : 'border-gray-200 dark:border-gray-700 hover:border-blue-300'
        } transition-all duration-200 z-10`}
      >
        <div className="flex items-center justify-between">
          <span className="font-medium text-gray-800 dark:text-gray-200">
            {option.text}
          </span>
          <span className="text-sm text-gray-500 dark:text-gray-400">
            {votes.length} votes
          </span>
        </div>
        {votes.length > 0 && (
          <div className="mt-2">
            <div className="h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
              <motion.div
                initial={{ width: 0 }}
                animate={{ width: `${percentage}%` }}
                className="h-full bg-blue-500"
                transition={{ duration: 0.5 }}
              />
            </div>
            <div className="mt-1 text-sm text-gray-500 dark:text-gray-400">
              {percentage.toFixed(1)}%
            </div>
          </div>
        )}
      </button>
    </motion.div>
  );
};

const PollMessage = ({ poll, onVote, currentUser, onFinalize, isOrganizer, onEdit }) => {
  const totalVotes = poll.options.reduce((sum, opt) => sum + opt.votes.length, 0);
  const userVote = poll.options.find(opt => 
    opt.votes.includes(currentUser.id)
  )?.id;
  
  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 max-w-lg w-full">
      <div className="flex items-center justify-between mb-4">
        <div>
          <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">
            {poll.question}
          </h3>
          <p className="text-sm text-gray-500 dark:text-gray-400">
            Created by {poll.creator.username}
          </p>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-500 dark:text-gray-400">
            {totalVotes} votes
          </span>
          {(isOrganizer || poll.creator.id === currentUser.id) && !poll.finalized && (
            <>
              <button
                onClick={() => onEdit(poll)}
                className="p-2 text-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-full transition-colors"
              >
                <Edit2 className="w-5 h-5" />
              </button>
              <button
                onClick={() => onFinalize(poll.id)}
                className="p-2 text-green-500 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-full transition-colors"
              >
                <Lock className="w-5 h-5" />
              </button>
            </>
          )}
        </div>
      </div>

      <div className="space-y-3">
        {poll.options.map((option) => (
          <VoteOption
            key={option.id}
            option={option}
            votes={option.votes}
            userVote={userVote}
            onVote={onVote}
            totalVotes={totalVotes}
            disabled={poll.finalized}
          />
        ))}
      </div>

      {poll.finalized && (
        <div className="mt-4 px-4 py-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg text-blue-600 dark:text-blue-400 flex items-center gap-2">
          <Lock className="w-4 h-4" />
          <span className="text-sm">This poll has been finalized</span>
        </div>
      )}
    </div>
  );
};

const CreatePollForm = ({ onSubmit, onCancel, initialData = null }) => {
  const [question, setQuestion] = useState(initialData?.question || '');
  const [options, setOptions] = useState(
    initialData?.options.map(opt => opt.text) || ['', '']
  );

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!question.trim()) {
      toast.error('Please enter a question');
      return;
    }

    const validOptions = options.filter(opt => opt.trim());
    if (validOptions.length < 2) {
      toast.error('Please enter at least 2 options');
      return;
    }

    onSubmit({
      question,
      options: validOptions.map(opt => ({ text: opt }))
    });
  };

  const addOption = () => {
    if (options.length < 10) {
      setOptions([...options, '']);
    }
  };

  const removeOption = (index) => {
    if (options.length > 2) {
      setOptions(options.filter((_, i) => i !== index));
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Question
        </label>
        <input
          type="text"
          value={question}
          onChange={(e) => setQuestion(e.target.value)}
          placeholder="Enter your question..."
          className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div className="space-y-3">
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
          Options
        </label>
        {options.map((option, index) => (
          <div key={index} className="flex items-center gap-2">
            <input
              type="text"
              value={option}
              onChange={(e) => {
                const newOptions = [...options];
                newOptions[index] = e.target.value;
                setOptions(newOptions);
              }}
              placeholder={`Option ${index + 1}`}
              className="flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {options.length > 2 && (
              <button
                type="button"
                onClick={() => removeOption(index)}
                className="p-2 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-full transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            )}
          </div>
        ))}
        {options.length < 10 && (
          <button
            type="button"
            onClick={addOption}
            className="text-blue-600 dark:text-blue-400 text-sm flex items-center gap-1"
          >
            + Add Option
          </button>
        )}
      </div>

      <div className="flex justify-end gap-3">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          {initialData ? 'Update Poll' : 'Create Poll'}
        </button>
      </div>
    </form>
  );
};

export { PollMessage, CreatePollForm };

================
File: src/hooks/useAuth.js
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import jwtDecode from 'jwt-decode';
import API from '../api/api';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);

  const validateToken = (token) => {
    if (!token) return false;
    try {
      const decoded = jwtDecode(token);
      return decoded.exp * 1000 > Date.now();
    } catch {
      return false;
    }
  };

  // Initialize auth state
  useEffect(() => {
    const initializeAuth = async () => {
      const token = localStorage.getItem('token');
      
      if (!token || !validateToken(token)) {
        localStorage.removeItem('token');
        setUser(null);
        setLoading(false);
        setInitialized(true);
        return;
      }

      try {
        const response = await API.get('/auth/me');
        setUser(response.data);
      } catch (error) {
        console.error('Auth initialization error:', error);
        localStorage.removeItem('token');
        setUser(null);
      } finally {
        setLoading(false);
        setInitialized(true);
      }
    };

    initializeAuth();
  }, []);

  const login = async ({ token, user }) => {
    try {
      localStorage.setItem('token', token);
      setUser(user);
      return true;
    } catch (error) {
      console.error('Login error:', error);
      return false;
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
  };

  const isAuthenticated = () => {
    const token = localStorage.getItem('token');
    return !!token && validateToken(token) && !!user;
  };

  // Don't render anything until we've initialized
  if (!initialized) {
    return null;
  }

  return (
    <AuthContext.Provider value={{ 
      user, 
      loading, 
      login, 
      logout, 
      isAuthenticated,
      initialized 
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

================
File: src/hooks/useChatMessages.js
================
import { useState, useEffect, useCallback } from 'react';
import { useStompClient } from './useStompClient';
import { useAuth } from './useAuth';
import API from '../api/api';
import toast from 'react-hot-toast';

export const useChatMessages = (
  chatType, // 'group' or 'private'
  chatId, // tripId for group chat, userId for private chat
  pageSize = 20
) => {
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [oldestMessageId, setOldestMessageId] = useState(null);
  const { client, connected } = useStompClient();
  const { user } = useAuth();

  // Fetch initial messages
  useEffect(() => {
    const fetchInitialMessages = async () => {
      try {
        setLoading(true);
        const endpoint = chatType === 'group' 
          ? `/chat/messages/trip/${chatId}`
          : `/chat/messages/private/${chatId}`;
        
        const response = await API.get(endpoint, {
          params: { limit: pageSize }
        });
        
        if (response.data.length > 0) {
          setMessages(response.data);
          setOldestMessageId(response.data[response.data.length - 1].id);
        }
      } catch (error) {
        console.error('Error fetching messages:', error);
        toast.error('Failed to load messages');
      } finally {
        setLoading(false);
      }
    };

    if (chatId) {
      fetchInitialMessages();
    }
  }, [chatId, chatType, pageSize]);

  // Subscribe to messages
  useEffect(() => {
    if (!client || !connected || !chatId) return;

    const topic = chatType === 'group' 
      ? `/topic/trip/${chatId}`
      : `/user/queue/private`;

    const subscription = client.subscribe(topic, (message) => {
      try {
        const receivedMessage = JSON.parse(message.body);
        // For private chat, only handle messages for this chat
        if (chatType === 'private' && 
            receivedMessage.sender !== user.username && 
            receivedMessage.recipient !== user.username) {
          return;
        }
        setMessages(prev => [receivedMessage, ...prev]);
      } catch (error) {
        console.error('Error handling message:', error);
      }
    });

    return () => subscription.unsubscribe();
  }, [client, connected, chatId, chatType, user]);

  const loadMore = useCallback(async () => {
    if (!hasMore || loading || !oldestMessageId) return;

    try {
      setLoading(true);
      const endpoint = chatType === 'group'
        ? `/chat/messages/trip/${chatId}`
        : `/chat/messages/private/${chatId}`;

      const response = await API.get(endpoint, {
        params: {
          before: oldestMessageId,
          limit: pageSize
        }
      });

      if (response.data.length === 0) {
        setHasMore(false);
      } else {
        setMessages(prev => [...prev, ...response.data]);
        setOldestMessageId(response.data[response.data.length - 1].id);
      }
    } catch (error) {
      console.error('Error loading more messages:', error);
      toast.error('Failed to load more messages');
    } finally {
      setLoading(false);
    }
  }, [chatId, chatType, hasMore, loading, oldestMessageId, pageSize]);

  const sendMessage = useCallback((content, type = 'TEXT', fileData = null) => {
    if (!client || !connected) {
      toast.error('Not connected to chat server');
      return;
    }

    try {
      const destination = chatType === 'group'
        ? `/app/chat.trip.${chatId}`
        : '/app/chat.private';

      const message = {
        content,
        type,
        timestamp: new Date().toISOString(),
        ...(chatType === 'private' && { recipient: chatId }),
        ...(fileData && { fileName: fileData.fileName, fileUrl: fileData.fileUrl })
      };

      client.publish({
        destination,
        body: JSON.stringify(message)
      });
    } catch (error) {
      console.error('Error sending message:', error);
      toast.error('Failed to send message');
    }
  }, [client, connected, chatId, chatType]);

  const addReaction = useCallback(async (messageId, reactionType) => {
    try {
      const response = await API.post(`/api/chat/messages/${messageId}/reactions`, {
        reactionType
      });
      
      setMessages(prev => prev.map(msg => 
        msg.id === messageId ? response.data : msg
      ));
    } catch (error) {
      console.error('Error adding reaction:', error);
      toast.error('Failed to add reaction');
    }
  }, []);

  return {
    messages,
    loading,
    hasMore,
    loadMore,
    sendMessage,
    addReaction
  };
};

================
File: src/hooks/useDarkMode.js
================
import { useState, useEffect } from 'react';

export const useDarkMode = () => {
  const [isDark, setIsDark] = useState(false);
  
  useEffect(() => {
    const saved = localStorage.getItem('darkMode') === 'true';
    setIsDark(saved);
    document.documentElement.classList.toggle('dark', saved);
  }, []);
  
  const toggleDarkMode = () => {
    setIsDark((prev) => {
      const newVal = !prev;
      localStorage.setItem('darkMode', newVal);
      document.documentElement.classList.toggle('dark', newVal);
      return newVal;
    });
  };
  
  return { isDark, toggleDarkMode };
};

================
File: src/hooks/useStompClient.js
================
// src/hooks/useStompClient.js
import { useState, useEffect } from 'react';
import { Client } from '@stomp/stompjs';
import SockJS from 'sockjs-client';

const SOCKET_URL = 'http://localhost:8080/ws'; // Point to the Spring WebSocket endpoint

export const useStompClient = () => {
  const [client, setClient] = useState(null);
  const [connected, setConnected] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem('token');

    const stompClient = new Client({
      webSocketFactory: () => new SockJS(SOCKET_URL),
      connectHeaders: {
        Authorization: `Bearer ${token}`
      },
      debug: (str) => {
        console.log(str);
      },
      reconnectDelay: 5000,
      heartbeatIncoming: 4000,
      heartbeatOutgoing: 4000,
      onConnect: () => {
        console.log('STOMP client connected');
        setConnected(true);
      },
      onDisconnect: () => {
        console.log('STOMP client disconnected');
        setConnected(false);
      },
      onStompError: (frame) => {
        console.error('STOMP protocol error:', frame);
      },
      beforeConnect: () => {
        // Add Authorization header to the WebSocket handshake request
        const socket = stompClient.webSocket;
        if (socket && socket.readyState === WebSocket.CONNECTING) {
          socket._transport.options = {
            ...socket._transport.options,
            headers: {
              Authorization: `Bearer ${token}`
            }
          };
        }
      }
    });

    // Add interceptor for adding Authorization header to all STOMP frames
    const originalPublish = stompClient.publish;
    stompClient.publish = function(parameters) {
      const message = {
        ...parameters,
        headers: {
          ...parameters.headers,
          Authorization: `Bearer ${token}`
        }
      };
      return originalPublish.call(this, message);
    };

    try {
      stompClient.activate();
      setClient(stompClient);
    } catch (error) {
      console.error('Error activating STOMP client:', error);
    }

    return () => {
      if (stompClient) {
        stompClient.deactivate();
      }
    };
  }, []);

  return { client, connected };
};

================
File: src/hooks/useTripAccess.js
================
import { useAuth } from './useAuth';

export const useTripAccess = (trip) => {
  const { user } = useAuth();
  if (!trip || !user) return false;
  return trip.members?.some((member) => member.id === user.id);
};

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.jsx
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import ErrorBoundary from './components/common/ErrorBoundary';
import Navbar from './components/layout/Navbar';
import Footer from './components/layout/Footer';
import Notifications from './components/layout/Notifications';
import Login from './components/auth/Login';
import Register from './components/auth/Register';
import ProtectedRoute from './components/common/ProtectedRoute';
import Profile from './components/auth/Profile';
import Dashboard from './components/dashboard/Dashboard';
import TripDetails from './components/dashboard/TripDetails';
import GroupChat from './components/chat/GroupChat';
import PrivateChat from './components/chat/PrivateChat';
import Friends from './components/social/Friends';
import CalendarSync from './components/trip/CalendarSync';
import CreateTrip from './components/trip/CreateTrip';
import AdminDashboard from './components/admin/AdminDashboard';
import AdminUsers from './components/admin/AdminUsers';
import AdminTrips from './components/admin/AdminTrips';
import { AuthProvider } from './hooks/useAuth';
import { Toaster } from 'react-hot-toast';
import { ChatProvider } from './components/contexts/ChatContext';

function App() {
  return (
    <Router>
      <AuthProvider>
        <ErrorBoundary>
            <div className="min-h-screen flex flex-col">
              <Navbar />
              <main className="flex-1 pt-16">
                <Routes>
                  <Route path="/login" element={<Login />} />
                  <Route path="/register" element={<Register />} />
                  <Route 
                    path="/*" 
                    element={
                      <ProtectedRoute>
                        <ChatProvider>
                          <Routes>
                            <Route path="/" element={<Dashboard />} />
                            <Route path="/profile/:username" element={<Profile />} />
                            <Route path="/trips/create" element={<CreateTrip /> } />
                            <Route path="/trips/:id" element={<TripDetails />} />
                            <Route path="/trips/:id/chat" element={<GroupChat />} />
                            <Route path="/friends/:friendId/chat" element={<PrivateChat />} />
                            <Route path="/friends" element={<Friends />} />
                            <Route path="/calendar" element={<CalendarSync tripId={1} />} />
                            <Route path="/admin" element={<AdminDashboard />} />
                            <Route path="/admin/users" element={<AdminUsers />} />
                            <Route path="/admin/trips" element={<AdminTrips />} />
                          </Routes>
                          <Notifications />
                        </ChatProvider>
                      </ProtectedRoute>
                    }
                  />
                </Routes>
              </main>
              <Toaster position="bottom-left" />
              <Footer />
            </div>
        </ErrorBoundary>
      </AuthProvider>
    </Router> 
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Add any custom global styles here */

================
File: src/index.js
================
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css'; // Global Tailwind CSS and custom styles

const container = document.getElementById('root');
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "travel-buddy-client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emoji-mart/data": "^1.2.1",
    "@emoji-mart/react": "^1.1.1",
    "@headlessui/react": "^1.7.7",
    "@stomp/stompjs": "^7.0.0",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^0.27.2",
    "emoji-mart": "^5.6.0",
    "jwt-decode": "^3.1.2",
    "lucide-react": "^0.475.0",
    "motion": "^12.4.3",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hot-toast": "^2.5.1",
    "react-router-dom": "^6.3.0",
    "react-scripts": "5.0.1",
    "sockjs-client": "^1.6.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "export NODE_OPTIONS=--openssl-legacy-provider && react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ],
    "rules": {
      "react/jsx-uses-react": "off",
      "react/react-in-jsx-scope": "off"
    }
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "ajv": "^7.2.4",
    "autoprefixer": "^10.4.7",
    "postcss": "^8.4.14",
    "tailwindcss": "^3.1.8"
  }
}

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: tailwind.config.js
================
module.exports = {
    darkMode: 'class', // Enable dark mode via a CSS class
    content: [
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }



================================================================
End of Codebase
================================================================
